{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e87c87a3",
   "metadata": {
    "papermill": {
     "duration": 0.004429,
     "end_time": "2025-05-27T04:43:06.004898",
     "exception": false,
     "start_time": "2025-05-27T04:43:06.000469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2669cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:06.013618Z",
     "iopub.status.busy": "2025-05-27T04:43:06.013378Z",
     "iopub.status.idle": "2025-05-27T04:43:07.589975Z",
     "shell.execute_reply": "2025-05-27T04:43:07.588680Z"
    },
    "papermill": {
     "duration": 1.582796,
     "end_time": "2025-05-27T04:43:07.591448",
     "exception": false,
     "start_time": "2025-05-27T04:43:06.008652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b2f4d911",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:07.600688Z",
     "iopub.status.busy": "2025-05-27T04:43:07.599889Z",
     "iopub.status.idle": "2025-05-27T04:43:21.642451Z",
     "shell.execute_reply": "2025-05-27T04:43:21.641533Z"
    },
    "papermill": {
     "duration": 14.048666,
     "end_time": "2025-05-27T04:43:21.644051",
     "exception": false,
     "start_time": "2025-05-27T04:43:07.595385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-27 04:43:10.408487: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748320990.611542      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748320990.674869      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4900baca",
   "metadata": {
    "papermill": {
     "duration": 0.003488,
     "end_time": "2025-05-27T04:43:21.651152",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.647664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "049b3a68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.659076Z",
     "iopub.status.busy": "2025-05-27T04:43:21.658567Z",
     "iopub.status.idle": "2025-05-27T04:43:21.686589Z",
     "shell.execute_reply": "2025-05-27T04:43:21.685806Z"
    },
    "papermill": {
     "duration": 0.0333,
     "end_time": "2025-05-27T04:43:21.687833",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.654533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Cadangan Devisa  Money Supply (M2)\n",
      "0  1/3/2017  606000  13485            116.9         4936881.99\n",
      "1  1/4/2017  606000  13478            116.9         4936881.99\n",
      "2  1/5/2017  607000  13370            116.9         4936881.99\n",
      "3  1/6/2017  606000  13347            116.9         4936881.99\n",
      "4  1/9/2017  602000  13385            116.9         4936881.99\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Final Dataset Gold Prediction.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5536d1a",
   "metadata": {
    "papermill": {
     "duration": 0.003415,
     "end_time": "2025-05-27T04:43:21.695527",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.692112",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "922dbc51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.703371Z",
     "iopub.status.busy": "2025-05-27T04:43:21.703163Z",
     "iopub.status.idle": "2025-05-27T04:43:21.723593Z",
     "shell.execute_reply": "2025-05-27T04:43:21.722872Z"
    },
    "papermill": {
     "duration": 0.025644,
     "end_time": "2025-05-27T04:43:21.724762",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.699118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 5 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Cadangan Devisa    1932 non-null   float64\n",
      " 4   Money Supply (M2)  1932 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(1)\n",
      "memory usage: 75.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "39c7bf76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.732671Z",
     "iopub.status.busy": "2025-05-27T04:43:21.732295Z",
     "iopub.status.idle": "2025-05-27T04:43:21.744275Z",
     "shell.execute_reply": "2025-05-27T04:43:21.743700Z"
    },
    "papermill": {
     "duration": 0.017095,
     "end_time": "2025-05-27T04:43:21.745237",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.728142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5b40ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.753025Z",
     "iopub.status.busy": "2025-05-27T04:43:21.752758Z",
     "iopub.status.idle": "2025-05-27T04:43:21.759353Z",
     "shell.execute_reply": "2025-05-27T04:43:21.758684Z"
    },
    "papermill": {
     "duration": 0.011736,
     "end_time": "2025-05-27T04:43:21.760450",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.748714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e324abd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.768244Z",
     "iopub.status.busy": "2025-05-27T04:43:21.768022Z",
     "iopub.status.idle": "2025-05-27T04:43:21.773238Z",
     "shell.execute_reply": "2025-05-27T04:43:21.772589Z"
    },
    "papermill": {
     "duration": 0.010214,
     "end_time": "2025-05-27T04:43:21.774226",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.764012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb89b2b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.782187Z",
     "iopub.status.busy": "2025-05-27T04:43:21.781963Z",
     "iopub.status.idle": "2025-05-27T04:43:21.785048Z",
     "shell.execute_reply": "2025-05-27T04:43:21.784510Z"
    },
    "papermill": {
     "duration": 0.008527,
     "end_time": "2025-05-27T04:43:21.786261",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.777734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price']\n",
    "\n",
    "# 'Kurs', 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a8a45b91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.794469Z",
     "iopub.status.busy": "2025-05-27T04:43:21.794261Z",
     "iopub.status.idle": "2025-05-27T04:43:21.801201Z",
     "shell.execute_reply": "2025-05-27T04:43:21.800601Z"
    },
    "papermill": {
     "duration": 0.012245,
     "end_time": "2025-05-27T04:43:21.802429",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.790184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c1a4689e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.810428Z",
     "iopub.status.busy": "2025-05-27T04:43:21.810219Z",
     "iopub.status.idle": "2025-05-27T04:43:21.817114Z",
     "shell.execute_reply": "2025-05-27T04:43:21.816577Z"
    },
    "papermill": {
     "duration": 0.012123,
     "end_time": "2025-05-27T04:43:21.818192",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.806069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0e997cfb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.826127Z",
     "iopub.status.busy": "2025-05-27T04:43:21.825910Z",
     "iopub.status.idle": "2025-05-27T04:43:21.829412Z",
     "shell.execute_reply": "2025-05-27T04:43:21.828876Z"
    },
    "papermill": {
     "duration": 0.008562,
     "end_time": "2025-05-27T04:43:21.830517",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.821955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7123001f",
   "metadata": {
    "papermill": {
     "duration": 0.003263,
     "end_time": "2025-05-27T04:43:21.837485",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.834222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9168f391",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:43:21.845546Z",
     "iopub.status.busy": "2025-05-27T04:43:21.845344Z",
     "iopub.status.idle": "2025-05-27T04:45:12.529301Z",
     "shell.execute_reply": "2025-05-27T04:45:12.528358Z"
    },
    "papermill": {
     "duration": 110.68948,
     "end_time": "2025-05-27T04:45:12.530592",
     "exception": false,
     "start_time": "2025-05-27T04:43:21.841112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748321003.154688      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748321003.155442      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1748321008.082434      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=39796.4659\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=23543.7955\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=37696.4615\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 57ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=24999.6394\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=49789.0114\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=33781.8811\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=56674.9259\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=42359.8354\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=21694.4708\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=25540.9028\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=23716.4373\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=21230.9059\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=22545.2848\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 66ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=29402.6955\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=22753.8802\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=21845.1740\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "11     64      0.2         0.0005          64  21230.905928  0.012009   \n",
      "8      64      0.2         0.0010          32  21694.470804  0.012475   \n",
      "15     64      0.3         0.0005          64  21845.173964  0.012897   \n",
      "12     64      0.3         0.0010          32  22545.284841  0.013491   \n",
      "14     64      0.3         0.0005          32  22753.880157  0.013699   \n",
      "\n",
      "          R2  \n",
      "11  0.984459  \n",
      "8   0.983773  \n",
      "15  0.983546  \n",
      "12  0.982475  \n",
      "14  0.982149  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd6cf8a",
   "metadata": {
    "papermill": {
     "duration": 0.006498,
     "end_time": "2025-05-27T04:45:12.544430",
     "exception": false,
     "start_time": "2025-05-27T04:45:12.537932",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7154cdbb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:45:12.557955Z",
     "iopub.status.busy": "2025-05-27T04:45:12.557698Z",
     "iopub.status.idle": "2025-05-27T04:45:22.833658Z",
     "shell.execute_reply": "2025-05-27T04:45:22.832788Z"
    },
    "papermill": {
     "duration": 10.284138,
     "end_time": "2025-05-27T04:45:22.834774",
     "exception": false,
     "start_time": "2025-05-27T04:45:12.550636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 18ms/step - loss: 0.0289 - val_loss: 0.0046\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0016 - val_loss: 0.0035\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0012 - val_loss: 0.0036\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0013 - val_loss: 0.0050\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0028\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0011 - val_loss: 0.0029\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0011 - val_loss: 0.0019\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0093\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0034\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 8.7540e-04 - val_loss: 0.0047\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 9.5070e-04 - val_loss: 0.0054\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.7423e-04 - val_loss: 0.0097\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.1818e-04 - val_loss: 0.0072\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.6549e-04 - val_loss: 0.0060\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.0393e-04 - val_loss: 0.0048\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.3538e-04 - val_loss: 0.0049\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.6972e-04 - val_loss: 0.0060\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a0f37be",
   "metadata": {
    "papermill": {
     "duration": 0.012676,
     "end_time": "2025-05-27T04:45:22.861387",
     "exception": false,
     "start_time": "2025-05-27T04:45:22.848711",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f32d26df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:45:22.887429Z",
     "iopub.status.busy": "2025-05-27T04:45:22.887209Z",
     "iopub.status.idle": "2025-05-27T04:45:23.445496Z",
     "shell.execute_reply": "2025-05-27T04:45:23.444526Z"
    },
    "papermill": {
     "duration": 0.57267,
     "end_time": "2025-05-27T04:45:23.446822",
     "exception": false,
     "start_time": "2025-05-27T04:45:22.874152",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Final Test RMSE: 42765.2280\n",
      "Final Test MAPE: 0.0243\n",
      "Final Test MSLE: 0.000972\n",
      "Final Test R² Score: 0.9369\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "53f4e1d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:45:23.475372Z",
     "iopub.status.busy": "2025-05-27T04:45:23.475122Z",
     "iopub.status.idle": "2025-05-27T04:45:23.788443Z",
     "shell.execute_reply": "2025-05-27T04:45:23.787736Z"
    },
    "papermill": {
     "duration": 0.328896,
     "end_time": "2025-05-27T04:45:23.790189",
     "exception": false,
     "start_time": "2025-05-27T04:45:23.461293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d2724e4",
   "metadata": {
    "papermill": {
     "duration": 0.013892,
     "end_time": "2025-05-27T04:45:23.818596",
     "exception": false,
     "start_time": "2025-05-27T04:45:23.804704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bf603ffd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-27T04:45:23.848298Z",
     "iopub.status.busy": "2025-05-27T04:45:23.847732Z",
     "iopub.status.idle": "2025-05-27T04:45:23.882273Z",
     "shell.execute_reply": "2025-05-27T04:45:23.881364Z"
    },
    "papermill": {
     "duration": 0.050601,
     "end_time": "2025-05-27T04:45:23.883500",
     "exception": false,
     "start_time": "2025-05-27T04:45:23.832899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11945960,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 145.367537,
   "end_time": "2025-05-27T04:45:27.013666",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-27T04:43:01.646129",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
