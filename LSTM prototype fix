{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bd0cc413",
   "metadata": {
    "papermill": {
     "duration": 0.004012,
     "end_time": "2025-05-11T12:35:33.693900",
     "exception": false,
     "start_time": "2025-05-11T12:35:33.689888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "This notebook uses monetary indicators as additional features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9c363889",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:33.701035Z",
     "iopub.status.busy": "2025-05-11T12:35:33.700804Z",
     "iopub.status.idle": "2025-05-11T12:35:35.889865Z",
     "shell.execute_reply": "2025-05-11T12:35:35.889043Z"
    },
    "papermill": {
     "duration": 2.193892,
     "end_time": "2025-05-11T12:35:35.891080",
     "exception": false,
     "start_time": "2025-05-11T12:35:33.697188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9dc9a6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:35.898511Z",
     "iopub.status.busy": "2025-05-11T12:35:35.898209Z",
     "iopub.status.idle": "2025-05-11T12:35:58.910831Z",
     "shell.execute_reply": "2025-05-11T12:35:58.910227Z"
    },
    "papermill": {
     "duration": 23.017566,
     "end_time": "2025-05-11T12:35:58.912159",
     "exception": false,
     "start_time": "2025-05-11T12:35:35.894593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-11 12:35:42.354664: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1746966942.806813      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1746966942.953546      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d02dc813",
   "metadata": {
    "papermill": {
     "duration": 0.00303,
     "end_time": "2025-05-11T12:35:58.918787",
     "exception": false,
     "start_time": "2025-05-11T12:35:58.915757",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "466e39ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:58.926333Z",
     "iopub.status.busy": "2025-05-11T12:35:58.925629Z",
     "iopub.status.idle": "2025-05-11T12:35:58.963616Z",
     "shell.execute_reply": "2025-05-11T12:35:58.962773Z"
    },
    "papermill": {
     "duration": 0.042941,
     "end_time": "2025-05-11T12:35:58.964789",
     "exception": false,
     "start_time": "2025-05-11T12:35:58.921848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Inflasi  IndONIA  Cadangan Devisa  \\\n",
      "0  1/3/2017  606000  13485     3.49  4.12408            116.9   \n",
      "1  1/4/2017  606000  13478     3.49  4.12935            116.9   \n",
      "2  1/5/2017  607000  13370     3.49  4.12697            116.9   \n",
      "3  1/6/2017  606000  13347     3.49  4.13105            116.9   \n",
      "4  1/9/2017  602000  13385     3.49  4.14132            116.9   \n",
      "\n",
      "   Money Supply (M2)  Minyak  \n",
      "0         4936881.99   52.33  \n",
      "1         4936881.99   53.26  \n",
      "2         4936881.99   53.76  \n",
      "3         4936881.99   53.99  \n",
      "4         4936881.99   51.96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec3d5322",
   "metadata": {
    "papermill": {
     "duration": 0.002964,
     "end_time": "2025-05-11T12:35:58.971316",
     "exception": false,
     "start_time": "2025-05-11T12:35:58.968352",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a5f3f543",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:58.978500Z",
     "iopub.status.busy": "2025-05-11T12:35:58.978290Z",
     "iopub.status.idle": "2025-05-11T12:35:59.006960Z",
     "shell.execute_reply": "2025-05-11T12:35:59.006304Z"
    },
    "papermill": {
     "duration": 0.03349,
     "end_time": "2025-05-11T12:35:59.008001",
     "exception": false,
     "start_time": "2025-05-11T12:35:58.974511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0ea93dd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.015440Z",
     "iopub.status.busy": "2025-05-11T12:35:59.014919Z",
     "iopub.status.idle": "2025-05-11T12:35:59.026133Z",
     "shell.execute_reply": "2025-05-11T12:35:59.025622Z"
    },
    "papermill": {
     "duration": 0.015888,
     "end_time": "2025-05-11T12:35:59.027105",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.011217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d9289c37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.034365Z",
     "iopub.status.busy": "2025-05-11T12:35:59.034179Z",
     "iopub.status.idle": "2025-05-11T12:35:59.041170Z",
     "shell.execute_reply": "2025-05-11T12:35:59.040495Z"
    },
    "papermill": {
     "duration": 0.011723,
     "end_time": "2025-05-11T12:35:59.042174",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.030451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c28b1511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.049753Z",
     "iopub.status.busy": "2025-05-11T12:35:59.049527Z",
     "iopub.status.idle": "2025-05-11T12:35:59.054408Z",
     "shell.execute_reply": "2025-05-11T12:35:59.053848Z"
    },
    "papermill": {
     "duration": 0.009779,
     "end_time": "2025-05-11T12:35:59.055475",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.045696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cc6f7bd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.062732Z",
     "iopub.status.busy": "2025-05-11T12:35:59.062519Z",
     "iopub.status.idle": "2025-05-11T12:35:59.069986Z",
     "shell.execute_reply": "2025-05-11T12:35:59.069256Z"
    },
    "papermill": {
     "duration": 0.012362,
     "end_time": "2025-05-11T12:35:59.071193",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.058831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   Date               1932 non-null   datetime64[ns]\n",
      " 1   Price              1932 non-null   int64         \n",
      " 2   Kurs               1932 non-null   int64         \n",
      " 3   Inflasi            1932 non-null   float64       \n",
      " 4   IndONIA            1932 non-null   float64       \n",
      " 5   Cadangan Devisa    1932 non-null   float64       \n",
      " 6   Money Supply (M2)  1932 non-null   float64       \n",
      " 7   Minyak             1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(5), int64(2)\n",
      "memory usage: 120.9 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42597fc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.079191Z",
     "iopub.status.busy": "2025-05-11T12:35:59.078996Z",
     "iopub.status.idle": "2025-05-11T12:35:59.082189Z",
     "shell.execute_reply": "2025-05-11T12:35:59.081473Z"
    },
    "papermill": {
     "duration": 0.008146,
     "end_time": "2025-05-11T12:35:59.083203",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.075057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs', 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)']\n",
    "\n",
    "# Kolom 'Inflasi', 'IndONIA', 'Cadangan Devisa', 'Money Supply (M2)', 'Minyak'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "838305e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.091303Z",
     "iopub.status.busy": "2025-05-11T12:35:59.091028Z",
     "iopub.status.idle": "2025-05-11T12:35:59.101036Z",
     "shell.execute_reply": "2025-05-11T12:35:59.100321Z"
    },
    "papermill": {
     "duration": 0.015003,
     "end_time": "2025-05-11T12:35:59.102082",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.087079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a22fd44d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.109885Z",
     "iopub.status.busy": "2025-05-11T12:35:59.109683Z",
     "iopub.status.idle": "2025-05-11T12:35:59.120976Z",
     "shell.execute_reply": "2025-05-11T12:35:59.120458Z"
    },
    "papermill": {
     "duration": 0.016515,
     "end_time": "2025-05-11T12:35:59.122141",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.105626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1d9e3116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.129861Z",
     "iopub.status.busy": "2025-05-11T12:35:59.129631Z",
     "iopub.status.idle": "2025-05-11T12:35:59.132851Z",
     "shell.execute_reply": "2025-05-11T12:35:59.132348Z"
    },
    "papermill": {
     "duration": 0.008083,
     "end_time": "2025-05-11T12:35:59.133953",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.125870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "571b0f38",
   "metadata": {
    "papermill": {
     "duration": 0.003188,
     "end_time": "2025-05-11T12:35:59.140614",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.137426",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b0631c32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:35:59.149109Z",
     "iopub.status.busy": "2025-05-11T12:35:59.148917Z",
     "iopub.status.idle": "2025-05-11T12:38:36.168713Z",
     "shell.execute_reply": "2025-05-11T12:38:36.167763Z"
    },
    "papermill": {
     "duration": 157.026158,
     "end_time": "2025-05-11T12:38:36.170138",
     "exception": false,
     "start_time": "2025-05-11T12:35:59.143980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1746966961.878265      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1746966961.878938      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1746966967.309891      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=94995.7864\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=108718.7437\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=115955.7810\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=144088.5021\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=76348.6330\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=136658.8370\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=100898.6340\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=113267.6389\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=62944.5929\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=42810.1969\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=53624.4095\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=60679.8475\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=48380.0701\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=63561.1497\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=67033.3649\n",
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=52586.5828\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "9      64      0.2         0.0010          64  42810.196922  0.030351   \n",
      "12     64      0.3         0.0010          32  48380.070075  0.034814   \n",
      "15     64      0.3         0.0005          64  52586.582835  0.035741   \n",
      "10     64      0.2         0.0005          32  53624.409502  0.036963   \n",
      "11     64      0.2         0.0005          64  60679.847460  0.039351   \n",
      "\n",
      "          R2  \n",
      "9   0.936811  \n",
      "12  0.919298  \n",
      "15  0.904655  \n",
      "10  0.900854  \n",
      "11  0.873048  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "813bdb07",
   "metadata": {
    "papermill": {
     "duration": 0.006317,
     "end_time": "2025-05-11T12:38:36.183107",
     "exception": false,
     "start_time": "2025-05-11T12:38:36.176790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9c8050e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:38:36.195992Z",
     "iopub.status.busy": "2025-05-11T12:38:36.195769Z",
     "iopub.status.idle": "2025-05-11T12:38:49.336392Z",
     "shell.execute_reply": "2025-05-11T12:38:49.335690Z"
    },
    "papermill": {
     "duration": 13.148478,
     "end_time": "2025-05-11T12:38:49.337529",
     "exception": false,
     "start_time": "2025-05-11T12:38:36.189051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 17ms/step - loss: 0.0320 - val_loss: 0.0254\n",
      "Epoch 2/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0032 - val_loss: 0.0161\n",
      "Epoch 3/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0022 - val_loss: 0.0128\n",
      "Epoch 4/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0084\n",
      "Epoch 5/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0014 - val_loss: 0.0053\n",
      "Epoch 6/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0014 - val_loss: 0.0080\n",
      "Epoch 7/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0015 - val_loss: 0.0045\n",
      "Epoch 8/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0069\n",
      "Epoch 9/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0094\n",
      "Epoch 10/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0013 - val_loss: 0.0053\n",
      "Epoch 11/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.0399e-04 - val_loss: 0.0074\n",
      "Epoch 12/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0012 - val_loss: 0.0073\n",
      "Epoch 13/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0010 - val_loss: 0.0036\n",
      "Epoch 14/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.0430e-04 - val_loss: 0.0046\n",
      "Epoch 15/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 9.1055e-04 - val_loss: 0.0047\n",
      "Epoch 16/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.8221e-04 - val_loss: 0.0030\n",
      "Epoch 17/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.9402e-04 - val_loss: 0.0040\n",
      "Epoch 18/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5626e-04 - val_loss: 0.0037\n",
      "Epoch 19/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.6576e-04 - val_loss: 0.0051\n",
      "Epoch 20/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.7938e-04 - val_loss: 0.0133\n",
      "Epoch 21/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5490e-04 - val_loss: 0.0123\n",
      "Epoch 22/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.2052e-04 - val_loss: 0.0097\n",
      "Epoch 23/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 8.2522e-04 - val_loss: 0.0056\n",
      "Epoch 24/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.9345e-04 - val_loss: 0.0053\n",
      "Epoch 25/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 7.5974e-04 - val_loss: 0.0054\n",
      "Epoch 26/150\n",
      "\u001b[1m47/47\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 6.7112e-04 - val_loss: 0.0061\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f113100f",
   "metadata": {
    "papermill": {
     "duration": 0.014113,
     "end_time": "2025-05-11T12:38:49.366510",
     "exception": false,
     "start_time": "2025-05-11T12:38:49.352397",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6e0e1438",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:38:49.394951Z",
     "iopub.status.busy": "2025-05-11T12:38:49.394730Z",
     "iopub.status.idle": "2025-05-11T12:38:50.427043Z",
     "shell.execute_reply": "2025-05-11T12:38:50.426296Z"
    },
    "papermill": {
     "duration": 1.048,
     "end_time": "2025-05-11T12:38:50.428341",
     "exception": false,
     "start_time": "2025-05-11T12:38:49.380341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Final Test RMSE: 53546.1990\n",
      "Final Test MAPE: 0.0365\n",
      "Final Test R² Score: 0.9011\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")\n",
    "\n",
    "# Visualization: Prediction\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test_inv_final, label='Actual Price')\n",
    "plt.plot(y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Multivariate Final Model')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Gold Price')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Visualization: Loss\n",
    "plt.figure(figsize=(8,5))\n",
    "plt.plot(history_final.history['loss'], label='Training Loss')\n",
    "plt.plot(history_final.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Final Model Loss During Training')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b11ae2d0",
   "metadata": {
    "papermill": {
     "duration": 0.015907,
     "end_time": "2025-05-11T12:38:50.461523",
     "exception": false,
     "start_time": "2025-05-11T12:38:50.445616",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0c00de09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T12:38:50.494481Z",
     "iopub.status.busy": "2025-05-11T12:38:50.494092Z",
     "iopub.status.idle": "2025-05-11T12:38:50.529122Z",
     "shell.execute_reply": "2025-05-11T12:38:50.528529Z"
    },
    "papermill": {
     "duration": 0.052904,
     "end_time": "2025-05-11T12:38:50.530108",
     "exception": false,
     "start_time": "2025-05-11T12:38:50.477204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11769821,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 206.313039,
   "end_time": "2025-05-11T12:38:53.556853",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-11T12:35:27.243814",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
