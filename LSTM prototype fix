{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "34029238",
   "metadata": {
    "papermill": {
     "duration": 0.00865,
     "end_time": "2025-05-11T13:36:35.217718",
     "exception": false,
     "start_time": "2025-05-11T13:36:35.209068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gold Price Prediction with LSTM\n",
    "This notebook uses monetary indicators as additional features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "833e3ab3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:35.226604Z",
     "iopub.status.busy": "2025-05-11T13:36:35.226342Z",
     "iopub.status.idle": "2025-05-11T13:36:36.789662Z",
     "shell.execute_reply": "2025-05-11T13:36:36.788792Z"
    },
    "papermill": {
     "duration": 1.56924,
     "end_time": "2025-05-11T13:36:36.791030",
     "exception": false,
     "start_time": "2025-05-11T13:36:35.221790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33e6eaba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:36.798779Z",
     "iopub.status.busy": "2025-05-11T13:36:36.798479Z",
     "iopub.status.idle": "2025-05-11T13:36:51.894457Z",
     "shell.execute_reply": "2025-05-11T13:36:51.893873Z"
    },
    "papermill": {
     "duration": 15.101415,
     "end_time": "2025-05-11T13:36:51.895956",
     "exception": false,
     "start_time": "2025-05-11T13:36:36.794541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-11 13:36:40.226495: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1746970600.464854      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1746970600.537009      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "# Import Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a3612a3",
   "metadata": {
    "papermill": {
     "duration": 0.003149,
     "end_time": "2025-05-11T13:36:51.902662",
     "exception": false,
     "start_time": "2025-05-11T13:36:51.899513",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "07848668",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:51.910156Z",
     "iopub.status.busy": "2025-05-11T13:36:51.909688Z",
     "iopub.status.idle": "2025-05-11T13:36:51.940129Z",
     "shell.execute_reply": "2025-05-11T13:36:51.939094Z"
    },
    "papermill": {
     "duration": 0.035418,
     "end_time": "2025-05-11T13:36:51.941323",
     "exception": false,
     "start_time": "2025-05-11T13:36:51.905905",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Date   Price   Kurs  Inflasi  IndONIA  Cadangan Devisa  \\\n",
      "0  1/3/2017  606000  13485     3.49  4.12408            116.9   \n",
      "1  1/4/2017  606000  13478     3.49  4.12935            116.9   \n",
      "2  1/5/2017  607000  13370     3.49  4.12697            116.9   \n",
      "3  1/6/2017  606000  13347     3.49  4.13105            116.9   \n",
      "4  1/9/2017  602000  13385     3.49  4.14132            116.9   \n",
      "\n",
      "   Money Supply (M2)  Minyak  \n",
      "0         4936881.99   52.33  \n",
      "1         4936881.99   53.26  \n",
      "2         4936881.99   53.76  \n",
      "3         4936881.99   53.99  \n",
      "4         4936881.99   51.96  \n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\")  # Modify path if needed\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "607b8ca6",
   "metadata": {
    "papermill": {
     "duration": 0.003225,
     "end_time": "2025-05-11T13:36:51.948048",
     "exception": false,
     "start_time": "2025-05-11T13:36:51.944823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing with Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "017f0f16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:51.955349Z",
     "iopub.status.busy": "2025-05-11T13:36:51.955098Z",
     "iopub.status.idle": "2025-05-11T13:36:51.978518Z",
     "shell.execute_reply": "2025-05-11T13:36:51.977550Z"
    },
    "papermill": {
     "duration": 0.028629,
     "end_time": "2025-05-11T13:36:51.979744",
     "exception": false,
     "start_time": "2025-05-11T13:36:51.951115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1695 entries, 0 to 1694\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1695 non-null   object \n",
      " 1   Price              1695 non-null   int64  \n",
      " 2   Kurs               1695 non-null   int64  \n",
      " 3   Inflasi            1695 non-null   float64\n",
      " 4   IndONIA            1695 non-null   float64\n",
      " 5   Cadangan Devisa    1695 non-null   float64\n",
      " 6   Money Supply (M2)  1695 non-null   float64\n",
      " 7   Minyak             1695 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 106.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac150ef9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:51.987068Z",
     "iopub.status.busy": "2025-05-11T13:36:51.986854Z",
     "iopub.status.idle": "2025-05-11T13:36:51.998448Z",
     "shell.execute_reply": "2025-05-11T13:36:51.997500Z"
    },
    "papermill": {
     "duration": 0.016773,
     "end_time": "2025-05-11T13:36:51.999812",
     "exception": false,
     "start_time": "2025-05-11T13:36:51.983039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a7fadae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.008797Z",
     "iopub.status.busy": "2025-05-11T13:36:52.008233Z",
     "iopub.status.idle": "2025-05-11T13:36:52.015308Z",
     "shell.execute_reply": "2025-05-11T13:36:52.014693Z"
    },
    "papermill": {
     "duration": 0.01276,
     "end_time": "2025-05-11T13:36:52.016804",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.004044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check duplicate\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5e763d8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.027444Z",
     "iopub.status.busy": "2025-05-11T13:36:52.026723Z",
     "iopub.status.idle": "2025-05-11T13:36:52.032244Z",
     "shell.execute_reply": "2025-05-11T13:36:52.031648Z"
    },
    "papermill": {
     "duration": 0.011725,
     "end_time": "2025-05-11T13:36:52.033438",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.021713",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check missing values\n",
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f4bf7732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.042197Z",
     "iopub.status.busy": "2025-05-11T13:36:52.041961Z",
     "iopub.status.idle": "2025-05-11T13:36:52.045273Z",
     "shell.execute_reply": "2025-05-11T13:36:52.044668Z"
    },
    "papermill": {
     "duration": 0.008978,
     "end_time": "2025-05-11T13:36:52.046411",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.037433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features to use\n",
    "features = ['Price', 'Kurs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a306c2bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.055324Z",
     "iopub.status.busy": "2025-05-11T13:36:52.055097Z",
     "iopub.status.idle": "2025-05-11T13:36:52.062439Z",
     "shell.execute_reply": "2025-05-11T13:36:52.061820Z"
    },
    "papermill": {
     "duration": 0.013256,
     "end_time": "2025-05-11T13:36:52.063624",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.050368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling all features\n",
    "scaler = MinMaxScaler()\n",
    "scaled_features = scaler.fit_transform(df[features])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "42e1d153",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.072512Z",
     "iopub.status.busy": "2025-05-11T13:36:52.072053Z",
     "iopub.status.idle": "2025-05-11T13:36:52.080199Z",
     "shell.execute_reply": "2025-05-11T13:36:52.079613Z"
    },
    "papermill": {
     "duration": 0.013903,
     "end_time": "2025-05-11T13:36:52.081434",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.067531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating the dataset with windowing\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "for i in range(window_size, len(scaled_features)):\n",
    "    X.append(scaled_features[i-window_size:i, :])  # All features\n",
    "    y.append(scaled_features[i, 0])  # Target: Price (index 0)\n",
    "\n",
    "X, y = np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "98b1f9bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.090015Z",
     "iopub.status.busy": "2025-05-11T13:36:52.089767Z",
     "iopub.status.idle": "2025-05-11T13:36:52.093780Z",
     "shell.execute_reply": "2025-05-11T13:36:52.093016Z"
    },
    "papermill": {
     "duration": 0.009686,
     "end_time": "2025-05-11T13:36:52.095040",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.085354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-Test split\n",
    "split = int(0.8 * len(X))\n",
    "\n",
    "X_train, X_test = X[:split], X[split:]\n",
    "y_train, y_test = y[:split], y[split:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "029b52de",
   "metadata": {
    "papermill": {
     "duration": 0.003621,
     "end_time": "2025-05-11T13:36:52.102760",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.099139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "825a2aa4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:36:52.111511Z",
     "iopub.status.busy": "2025-05-11T13:36:52.111241Z",
     "iopub.status.idle": "2025-05-11T13:38:54.901636Z",
     "shell.execute_reply": "2025-05-11T13:38:54.900892Z"
    },
    "papermill": {
     "duration": 122.796174,
     "end_time": "2025-05-11T13:38:54.902696",
     "exception": false,
     "start_time": "2025-05-11T13:36:52.106522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1746970613.474037      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1746970613.474732      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n",
      "I0000 00:00:1746970618.370805      60 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=32 | RMSE=16190.2302\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.001, batch_size=64 | RMSE=22914.2784\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=17414.5825\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=17613.1727\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=32 | RMSE=23897.5098\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.001, batch_size=64 | RMSE=14446.4551\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=20842.6720\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=32, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=20910.7182\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=32 | RMSE=14399.1118\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.001, batch_size=64 | RMSE=17235.2007\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=32 | RMSE=16442.9302\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.2, lr=0.0005, batch_size=64 | RMSE=14924.1997\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=32 | RMSE=15872.9835\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.001, batch_size=64 | RMSE=15933.2996\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=32 | RMSE=16010.6675\n",
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Finished: units=64, dropout=0.3, lr=0.0005, batch_size=64 | RMSE=15316.0940\n",
      "    units  dropout  learning_rate  batch_size          RMSE      MAPE  \\\n",
      "8      64      0.2         0.0010          32  14399.111762  0.011068   \n",
      "5      32      0.3         0.0010          64  14446.455142  0.010902   \n",
      "11     64      0.2         0.0005          64  14924.199687  0.011121   \n",
      "15     64      0.3         0.0005          64  15316.093988  0.011446   \n",
      "12     64      0.3         0.0010          32  15872.983459  0.011823   \n",
      "\n",
      "          R2  \n",
      "8   0.930456  \n",
      "5   0.929998  \n",
      "11  0.925291  \n",
      "15  0.921316  \n",
      "12  0.915491  \n"
     ]
    }
   ],
   "source": [
    "# Define grid\n",
    "units_list = [32, 64]\n",
    "dropout_list = [0.2, 0.3]\n",
    "learning_rate_list = [0.001, 0.0005]\n",
    "batch_size_list = [32, 64]\n",
    "\n",
    "results = []\n",
    "\n",
    "# Tuning\n",
    "# Tuning\n",
    "for units in units_list:\n",
    "    for dropout_rate in dropout_list:\n",
    "        for lr in learning_rate_list:\n",
    "            for batch_size in batch_size_list:\n",
    "                model = Sequential()\n",
    "                model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Tambahkan di sini\n",
    "                model.add(LSTM(units=units, return_sequences=True))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(LSTM(units=units//2, return_sequences=False))\n",
    "                model.add(Dropout(dropout_rate))\n",
    "                model.add(Dense(1))\n",
    "                \n",
    "                optimizer = Adam(learning_rate=lr)\n",
    "                model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "                \n",
    "                early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "                \n",
    "                history = model.fit(X_train, y_train, epochs=30, batch_size=batch_size, \n",
    "                                    validation_data=(X_test, y_test), callbacks=[early_stop], verbose=0)\n",
    "                \n",
    "                y_pred = model.predict(X_test)\n",
    "                y_pred_inv = scaler.inverse_transform(np.concatenate((y_pred, np.zeros((y_pred.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                y_test_inv = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "                \n",
    "                rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))\n",
    "                mape = mean_absolute_percentage_error(y_test_inv, y_pred_inv)\n",
    "                r2 = r2_score(y_test_inv, y_pred_inv)\n",
    "                \n",
    "                results.append({\n",
    "                    'units': units,\n",
    "                    'dropout': dropout_rate,\n",
    "                    'learning_rate': lr,\n",
    "                    'batch_size': batch_size,\n",
    "                    'RMSE': rmse,\n",
    "                    'MAPE': mape,\n",
    "                    'R2': r2\n",
    "                })\n",
    "                print(f\"Finished: units={units}, dropout={dropout_rate}, lr={lr}, batch_size={batch_size} | RMSE={rmse:.4f}\")\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "results_df = results_df.sort_values(by='RMSE')\n",
    "print(results_df.head(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c1972f5",
   "metadata": {
    "papermill": {
     "duration": 0.005881,
     "end_time": "2025-05-11T13:38:54.914856",
     "exception": false,
     "start_time": "2025-05-11T13:38:54.908975",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Retrain Final Model with Best Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7e1e53b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:38:54.927195Z",
     "iopub.status.busy": "2025-05-11T13:38:54.926965Z",
     "iopub.status.idle": "2025-05-11T13:39:02.739742Z",
     "shell.execute_reply": "2025-05-11T13:39:02.738890Z"
    },
    "papermill": {
     "duration": 7.820625,
     "end_time": "2025-05-11T13:39:02.741214",
     "exception": false,
     "start_time": "2025-05-11T13:38:54.920589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 18ms/step - loss: 0.0389 - val_loss: 0.0021\n",
      "Epoch 2/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0040 - val_loss: 0.0010\n",
      "Epoch 3/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0035 - val_loss: 0.0018\n",
      "Epoch 4/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0032 - val_loss: 7.5155e-04\n",
      "Epoch 5/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0028 - val_loss: 0.0015\n",
      "Epoch 6/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0028 - val_loss: 0.0011\n",
      "Epoch 7/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0025 - val_loss: 0.0024\n",
      "Epoch 8/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0029 - val_loss: 7.6894e-04\n",
      "Epoch 9/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0027 - val_loss: 0.0020\n",
      "Epoch 10/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0026 - val_loss: 8.5935e-04\n",
      "Epoch 11/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0024 - val_loss: 9.1169e-04\n",
      "Epoch 12/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0023 - val_loss: 0.0017\n",
      "Epoch 13/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0023 - val_loss: 0.0016\n",
      "Epoch 14/150\n",
      "\u001b[1m41/41\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 0.0024 - val_loss: 0.0012\n"
     ]
    }
   ],
   "source": [
    "# Based on tuning result\n",
    "best_units = 64\n",
    "best_dropout = 0.2\n",
    "best_lr = 0.001\n",
    "best_batch_size = 32\n",
    "\n",
    "final_model = Sequential()\n",
    "final_model.add(LSTM(units=best_units, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(LSTM(units=best_units//2, return_sequences=False))\n",
    "final_model.add(Dropout(best_dropout))\n",
    "final_model.add(Dense(1))\n",
    "\n",
    "optimizer = Adam(learning_rate=best_lr)\n",
    "final_model.compile(optimizer=optimizer, loss='mean_squared_error')\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "history_final = final_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=150,\n",
    "    batch_size=best_batch_size,\n",
    "    validation_data=(X_test, y_test),\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d78b634",
   "metadata": {
    "papermill": {
     "duration": 0.011286,
     "end_time": "2025-05-11T13:39:02.764966",
     "exception": false,
     "start_time": "2025-05-11T13:39:02.753680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final Evaluation and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dd87ff17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:39:02.789902Z",
     "iopub.status.busy": "2025-05-11T13:39:02.789232Z",
     "iopub.status.idle": "2025-05-11T13:39:03.378304Z",
     "shell.execute_reply": "2025-05-11T13:39:03.377651Z"
    },
    "papermill": {
     "duration": 0.602721,
     "end_time": "2025-05-11T13:39:03.379443",
     "exception": false,
     "start_time": "2025-05-11T13:39:02.776722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m11/11\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 28ms/step\n",
      "Final Test RMSE: 15023.0594\n",
      "Final Test MAPE: 0.0111\n",
      "Final Test MSLE: 0.000208\n",
      "Final Test R² Score: 0.9243\n"
     ]
    }
   ],
   "source": [
    "# Prediction\n",
    "y_pred_final = final_model.predict(X_test)\n",
    "y_pred_inv_final = scaler.inverse_transform(np.concatenate((y_pred_final, np.zeros((y_pred_final.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "y_test_inv_final = scaler.inverse_transform(np.concatenate((y_test.reshape(-1,1), np.zeros((y_test.shape[0], scaled_features.shape[1]-1))), axis=1))[:,0]\n",
    "\n",
    "# Evaluation\n",
    "final_rmse = np.sqrt(mean_squared_error(y_test_inv_final, y_pred_inv_final))\n",
    "final_mape = mean_absolute_percentage_error(y_test_inv_final, y_pred_inv_final)\n",
    "final_r2 = r2_score(y_test_inv_final, y_pred_inv_final)\n",
    "final_msle = mean_squared_log_error(y_test_inv_final, y_pred_inv_final)\n",
    "\n",
    "print(f\"Final Test RMSE: {final_rmse:.4f}\")\n",
    "print(f\"Final Test MAPE: {final_mape:.4f}\")\n",
    "print(f\"Final Test MSLE: {final_msle:.6f}\")\n",
    "print(f\"Final Test R² Score: {final_r2:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ebd4635f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:39:03.402944Z",
     "iopub.status.busy": "2025-05-11T13:39:03.402679Z",
     "iopub.status.idle": "2025-05-11T13:39:03.703632Z",
     "shell.execute_reply": "2025-05-11T13:39:03.702930Z"
    },
    "papermill": {
     "duration": 0.314025,
     "end_time": "2025-05-11T13:39:03.705213",
     "exception": false,
     "start_time": "2025-05-11T13:39:03.391188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization: Prediction\n",
    "date_test = df['Date'][-len(y_test_inv_final):]\n",
    "\n",
    "# Visualisasi dengan Date sebagai X-axis dan Price sebagai Y-axis\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.plot(date_test, y_test_inv_final, label='Actual Price')\n",
    "plt.plot(date_test, y_pred_inv_final, label='Predicted Price')\n",
    "plt.title('Gold Price Prediction - Final Model')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price (Rp)')\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
    "plt.gca().xaxis.set_major_locator(mdates.YearLocator())\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "307702db",
   "metadata": {
    "papermill": {
     "duration": 0.011494,
     "end_time": "2025-05-11T13:39:03.729356",
     "exception": false,
     "start_time": "2025-05-11T13:39:03.717862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Save the Final Model (.h5 format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d21ce0b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T13:39:03.753318Z",
     "iopub.status.busy": "2025-05-11T13:39:03.753086Z",
     "iopub.status.idle": "2025-05-11T13:39:03.787910Z",
     "shell.execute_reply": "2025-05-11T13:39:03.787305Z"
    },
    "papermill": {
     "duration": 0.048096,
     "end_time": "2025-05-11T13:39:03.788878",
     "exception": false,
     "start_time": "2025-05-11T13:39:03.740782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save Final Model to .h5 file\n",
    "final_model.save('gold_price_prediction_final.h5')\n",
    "print(\"Model saved successfully!\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 12255391,
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 156.421162,
   "end_time": "2025-05-11T13:39:07.220137",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-11T13:36:30.798975",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
