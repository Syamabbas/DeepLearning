{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e16cb2b0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:29.281413Z",
     "iopub.status.busy": "2025-04-18T09:46:29.281013Z",
     "iopub.status.idle": "2025-04-18T09:46:31.312942Z",
     "shell.execute_reply": "2025-04-18T09:46:31.311884Z"
    },
    "papermill": {
     "duration": 2.038172,
     "end_time": "2025-04-18T09:46:31.314454",
     "exception": false,
     "start_time": "2025-04-18T09:46:29.276282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e4/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e4/train.csv\n",
      "/kaggle/input/playground-series-s5e4/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "abf4f6d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:31.322100Z",
     "iopub.status.busy": "2025-04-18T09:46:31.321630Z",
     "iopub.status.idle": "2025-04-18T09:46:36.544472Z",
     "shell.execute_reply": "2025-04-18T09:46:36.543324Z"
    },
    "papermill": {
     "duration": 5.229002,
     "end_time": "2025-04-18T09:46:36.546768",
     "exception": false,
     "start_time": "2025-04-18T09:46:31.317766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 12 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           750000 non-null  int64  \n",
      " 1   Podcast_Name                 750000 non-null  object \n",
      " 2   Episode_Title                750000 non-null  object \n",
      " 3   Episode_Length_minutes       662907 non-null  float64\n",
      " 4   Genre                        750000 non-null  object \n",
      " 5   Host_Popularity_percentage   750000 non-null  float64\n",
      " 6   Publication_Day              750000 non-null  object \n",
      " 7   Publication_Time             750000 non-null  object \n",
      " 8   Guest_Popularity_percentage  603970 non-null  float64\n",
      " 9   Number_of_Ads                749999 non-null  float64\n",
      " 10  Episode_Sentiment            750000 non-null  object \n",
      " 11  Listening_Time_minutes       750000 non-null  float64\n",
      "dtypes: float64(5), int64(1), object(6)\n",
      "memory usage: 68.7+ MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 250000 entries, 0 to 249999\n",
      "Data columns (total 11 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           250000 non-null  int64  \n",
      " 1   Podcast_Name                 250000 non-null  object \n",
      " 2   Episode_Title                250000 non-null  object \n",
      " 3   Episode_Length_minutes       221264 non-null  float64\n",
      " 4   Genre                        250000 non-null  object \n",
      " 5   Host_Popularity_percentage   250000 non-null  float64\n",
      " 6   Publication_Day              250000 non-null  object \n",
      " 7   Publication_Time             250000 non-null  object \n",
      " 8   Guest_Popularity_percentage  201168 non-null  float64\n",
      " 9   Number_of_Ads                250000 non-null  float64\n",
      " 10  Episode_Sentiment            250000 non-null  object \n",
      "dtypes: float64(4), int64(1), object(6)\n",
      "memory usage: 21.0+ MB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "# Load data\n",
    "train = pd.read_csv(\"/kaggle/input/playground-series-s5e4/train.csv\")\n",
    "test = pd.read_csv(\"/kaggle/input/playground-series-s5e4/test.csv\")\n",
    "\n",
    "train.info()\n",
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "877e69ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:36.554419Z",
     "iopub.status.busy": "2025-04-18T09:46:36.554080Z",
     "iopub.status.idle": "2025-04-18T09:46:36.622895Z",
     "shell.execute_reply": "2025-04-18T09:46:36.621868Z"
    },
    "papermill": {
     "duration": 0.074417,
     "end_time": "2025-04-18T09:46:36.624552",
     "exception": false,
     "start_time": "2025-04-18T09:46:36.550135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop non-informative text features\n",
    "train = train.drop(columns=[\"Podcast_Name\", \"Episode_Title\"])\n",
    "test = test.drop(columns=[\"Podcast_Name\", \"Episode_Title\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2852b670",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:36.632701Z",
     "iopub.status.busy": "2025-04-18T09:46:36.631706Z",
     "iopub.status.idle": "2025-04-18T09:46:36.808622Z",
     "shell.execute_reply": "2025-04-18T09:46:36.807446Z"
    },
    "papermill": {
     "duration": 0.182416,
     "end_time": "2025-04-18T09:46:36.810316",
     "exception": false,
     "start_time": "2025-04-18T09:46:36.627900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 10 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           750000 non-null  int64  \n",
      " 1   Episode_Length_minutes       662907 non-null  float64\n",
      " 2   Genre                        750000 non-null  object \n",
      " 3   Host_Popularity_percentage   750000 non-null  float64\n",
      " 4   Publication_Day              750000 non-null  object \n",
      " 5   Publication_Time             750000 non-null  object \n",
      " 6   Guest_Popularity_percentage  603970 non-null  float64\n",
      " 7   Number_of_Ads                749999 non-null  float64\n",
      " 8   Episode_Sentiment            750000 non-null  object \n",
      " 9   Listening_Time_minutes       750000 non-null  float64\n",
      "dtypes: float64(5), int64(1), object(4)\n",
      "memory usage: 57.2+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a02d3146",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:36.818560Z",
     "iopub.status.busy": "2025-04-18T09:46:36.817757Z",
     "iopub.status.idle": "2025-04-18T09:46:36.882183Z",
     "shell.execute_reply": "2025-04-18T09:46:36.881076Z"
    },
    "papermill": {
     "duration": 0.070454,
     "end_time": "2025-04-18T09:46:36.884048",
     "exception": false,
     "start_time": "2025-04-18T09:46:36.813594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 250000 entries, 0 to 249999\n",
      "Data columns (total 9 columns):\n",
      " #   Column                       Non-Null Count   Dtype  \n",
      "---  ------                       --------------   -----  \n",
      " 0   id                           250000 non-null  int64  \n",
      " 1   Episode_Length_minutes       221264 non-null  float64\n",
      " 2   Genre                        250000 non-null  object \n",
      " 3   Host_Popularity_percentage   250000 non-null  float64\n",
      " 4   Publication_Day              250000 non-null  object \n",
      " 5   Publication_Time             250000 non-null  object \n",
      " 6   Guest_Popularity_percentage  201168 non-null  float64\n",
      " 7   Number_of_Ads                250000 non-null  float64\n",
      " 8   Episode_Sentiment            250000 non-null  object \n",
      "dtypes: float64(4), int64(1), object(4)\n",
      "memory usage: 17.2+ MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e37a619",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:36.892574Z",
     "iopub.status.busy": "2025-04-18T09:46:36.892274Z",
     "iopub.status.idle": "2025-04-18T09:46:36.959054Z",
     "shell.execute_reply": "2025-04-18T09:46:36.958102Z"
    },
    "papermill": {
     "duration": 0.073486,
     "end_time": "2025-04-18T09:46:36.960668",
     "exception": false,
     "start_time": "2025-04-18T09:46:36.887182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Handle missing values with median\n",
    "num_cols = [\"Episode_Length_minutes\", \"Guest_Popularity_percentage\", \"Number_of_Ads\"]\n",
    "for col in num_cols:\n",
    "    median_val = train[col].median()\n",
    "    train[col] = train[col].fillna(median_val)\n",
    "    test[col] = test[col].fillna(median_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "26b612ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:36.968492Z",
     "iopub.status.busy": "2025-04-18T09:46:36.967779Z",
     "iopub.status.idle": "2025-04-18T09:46:37.929046Z",
     "shell.execute_reply": "2025-04-18T09:46:37.928112Z"
    },
    "papermill": {
     "duration": 0.966833,
     "end_time": "2025-04-18T09:46:37.930746",
     "exception": false,
     "start_time": "2025-04-18T09:46:36.963913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Encode categorical columns\n",
    "cat_cols = [\"Genre\", \"Publication_Day\", \"Publication_Time\", \"Episode_Sentiment\"]\n",
    "encoder = OrdinalEncoder(handle_unknown=\"use_encoded_value\", unknown_value=-1)\n",
    "train[cat_cols] = encoder.fit_transform(train[cat_cols])\n",
    "test[cat_cols] = encoder.transform(test[cat_cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c8ae862a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:37.938289Z",
     "iopub.status.busy": "2025-04-18T09:46:37.937868Z",
     "iopub.status.idle": "2025-04-18T09:46:37.992067Z",
     "shell.execute_reply": "2025-04-18T09:46:37.991225Z"
    },
    "papermill": {
     "duration": 0.059698,
     "end_time": "2025-04-18T09:46:37.993660",
     "exception": false,
     "start_time": "2025-04-18T09:46:37.933962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Features and target\n",
    "X = train.drop(columns=[\"id\", \"Listening_Time_minutes\"])\n",
    "y = train[\"Listening_Time_minutes\"]\n",
    "X_test = test.drop(columns=[\"id\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bb9305c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:38.001021Z",
     "iopub.status.busy": "2025-04-18T09:46:38.000694Z",
     "iopub.status.idle": "2025-04-18T09:46:38.185723Z",
     "shell.execute_reply": "2025-04-18T09:46:38.184752Z"
    },
    "papermill": {
     "duration": 0.190631,
     "end_time": "2025-04-18T09:46:38.187526",
     "exception": false,
     "start_time": "2025-04-18T09:46:37.996895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Train-validation split\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "82fad6b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:38.195095Z",
     "iopub.status.busy": "2025-04-18T09:46:38.194721Z",
     "iopub.status.idle": "2025-04-18T09:46:43.876024Z",
     "shell.execute_reply": "2025-04-18T09:46:43.875298Z"
    },
    "papermill": {
     "duration": 5.686679,
     "end_time": "2025-04-18T09:46:43.877326",
     "exception": false,
     "start_time": "2025-04-18T09:46:38.190647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=6, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             multi_strategy=None, n_estimators=300, n_jobs=None,\n",
       "             num_parallel_tree=None, random_state=42, ...)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train model\n",
    "model = XGBRegressor(n_estimators=300, learning_rate=0.1, max_depth=6, random_state=42)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "58cc5ae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:43.885473Z",
     "iopub.status.busy": "2025-04-18T09:46:43.884793Z",
     "iopub.status.idle": "2025-04-18T09:46:44.332596Z",
     "shell.execute_reply": "2025-04-18T09:46:44.332000Z"
    },
    "papermill": {
     "duration": 0.453461,
     "end_time": "2025-04-18T09:46:44.334180",
     "exception": false,
     "start_time": "2025-04-18T09:46:43.880719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation RMSE: 13.0201\n"
     ]
    }
   ],
   "source": [
    "# Validate model\n",
    "val_preds = model.predict(X_val)\n",
    "rmse = np.sqrt(mean_squared_error(y_val, val_preds))\n",
    "print(f\"Validation RMSE: {rmse:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4414542d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-18T09:46:44.342152Z",
     "iopub.status.busy": "2025-04-18T09:46:44.341767Z",
     "iopub.status.idle": "2025-04-18T09:46:45.474085Z",
     "shell.execute_reply": "2025-04-18T09:46:45.473105Z"
    },
    "papermill": {
     "duration": 1.138225,
     "end_time": "2025-04-18T09:46:45.475963",
     "exception": false,
     "start_time": "2025-04-18T09:46:44.337738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Submission file created: submission.csv\n"
     ]
    }
   ],
   "source": [
    "# Predict test\n",
    "test_preds = model.predict(X_test)\n",
    "\n",
    "# Save submission\n",
    "submission = pd.DataFrame({\n",
    "    \"id\": test[\"id\"],\n",
    "    \"Listening_Time_minutes\": test_preds\n",
    "})\n",
    "submission.to_csv(\"submission.csv\", index=False)\n",
    "print(\"✅ Submission file created: submission.csv\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11351736,
     "sourceId": 91715,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.881052,
   "end_time": "2025-04-18T09:46:46.200415",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-18T09:46:24.319363",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
