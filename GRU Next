{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1015e2f3",
   "metadata": {
    "papermill": {
     "duration": 0.003317,
     "end_time": "2025-05-25T08:32:06.446144",
     "exception": false,
     "start_time": "2025-05-25T08:32:06.442827",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# GRU Model\n",
    "- Skenario 1A: Menggunakan hanya harga emas historis sebagai fitur (univariate time series)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "64e202fe",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:06.452404Z",
     "iopub.status.busy": "2025-05-25T08:32:06.452141Z",
     "iopub.status.idle": "2025-05-25T08:32:07.912178Z",
     "shell.execute_reply": "2025-05-25T08:32:07.911331Z"
    },
    "papermill": {
     "duration": 1.464503,
     "end_time": "2025-05-25T08:32:07.913398",
     "exception": false,
     "start_time": "2025-05-25T08:32:06.448895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2a6bf74f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:07.920503Z",
     "iopub.status.busy": "2025-05-25T08:32:07.920183Z",
     "iopub.status.idle": "2025-05-25T08:32:21.228515Z",
     "shell.execute_reply": "2025-05-25T08:32:21.227733Z"
    },
    "papermill": {
     "duration": 13.313436,
     "end_time": "2025-05-25T08:32:21.230078",
     "exception": false,
     "start_time": "2025-05-25T08:32:07.916642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-25 08:32:09.290189: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1748161929.475533      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1748161929.530521      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f49281cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.237224Z",
     "iopub.status.busy": "2025-05-25T08:32:21.236827Z",
     "iopub.status.idle": "2025-05-25T08:32:21.277432Z",
     "shell.execute_reply": "2025-05-25T08:32:21.276630Z"
    },
    "papermill": {
     "duration": 0.045204,
     "end_time": "2025-05-25T08:32:21.278610",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.233406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "202f1e6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.285349Z",
     "iopub.status.busy": "2025-05-25T08:32:21.285135Z",
     "iopub.status.idle": "2025-05-25T08:32:21.300412Z",
     "shell.execute_reply": "2025-05-25T08:32:21.299728Z"
    },
    "papermill": {
     "duration": 0.019874,
     "end_time": "2025-05-25T08:32:21.301564",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.281690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Inflasi', 'Kurs', 'Money Supply (M2)', 'IndONIA', 'Cadangan Devisa', 'Minyak'], axis=1, inplace=True)\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e3449f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.308686Z",
     "iopub.status.busy": "2025-05-25T08:32:21.308197Z",
     "iopub.status.idle": "2025-05-25T08:32:21.318081Z",
     "shell.execute_reply": "2025-05-25T08:32:21.317301Z"
    },
    "papermill": {
     "duration": 0.013978,
     "end_time": "2025-05-25T08:32:21.319176",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.305198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    1932 non-null   datetime64[ns]\n",
      " 1   Price   1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(1)\n",
      "memory usage: 30.3 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].astype('float64')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8674b853",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.324789Z",
     "iopub.status.busy": "2025-05-25T08:32:21.324596Z",
     "iopub.status.idle": "2025-05-25T08:32:21.329794Z",
     "shell.execute_reply": "2025-05-25T08:32:21.329231Z"
    },
    "papermill": {
     "duration": 0.009129,
     "end_time": "2025-05-25T08:32:21.330828",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.321699",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values: 0\n",
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Cek data\n",
    "print(\"Missing values:\", df.isnull().sum().sum())\n",
    "print(\"Duplicates:\", df.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "595ec83a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.337004Z",
     "iopub.status.busy": "2025-05-25T08:32:21.336817Z",
     "iopub.status.idle": "2025-05-25T08:32:21.344134Z",
     "shell.execute_reply": "2025-05-25T08:32:21.343416Z"
    },
    "papermill": {
     "duration": 0.011644,
     "end_time": "2025-05-25T08:32:21.345268",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.333624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 720\n"
     ]
    }
   ],
   "source": [
    "# Split train/test by date\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test = df[df['Date'].dt.year >= 2022]\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "72ed58ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.351543Z",
     "iopub.status.busy": "2025-05-25T08:32:21.351175Z",
     "iopub.status.idle": "2025-05-25T08:32:21.356964Z",
     "shell.execute_reply": "2025-05-25T08:32:21.356425Z"
    },
    "papermill": {
     "duration": 0.009974,
     "end_time": "2025-05-25T08:32:21.358015",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.348041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaled_data = scaler.fit_transform(df[NumCols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "512ea287",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.363843Z",
     "iopub.status.busy": "2025-05-25T08:32:21.363647Z",
     "iopub.status.idle": "2025-05-25T08:32:21.371600Z",
     "shell.execute_reply": "2025-05-25T08:32:21.370852Z"
    },
    "papermill": {
     "duration": 0.012178,
     "end_time": "2025-05-25T08:32:21.372831",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.360653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (1152, 60, 1) (1152,)\n",
      "Test shape: (720, 60, 1) (720,)\n"
     ]
    }
   ],
   "source": [
    "# Sliding window multivariate\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "\n",
    "for i in range(window_size, len(scaled_data)):\n",
    "    X.append(scaled_data[i-window_size:i])\n",
    "    y.append(scaled_data[i, 0])  # Index 0 = 'Price'\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)\n",
    "\n",
    "# Split back to train/test\n",
    "X_train, X_test = X[:-test_size], X[-test_size:]\n",
    "y_train, y_test = y[:-test_size], y[-test_size:]\n",
    "\n",
    "print(\"Train shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test shape:\", X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a03d6fc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.378739Z",
     "iopub.status.busy": "2025-05-25T08:32:21.378541Z",
     "iopub.status.idle": "2025-05-25T08:32:21.383903Z",
     "shell.execute_reply": "2025-05-25T08:32:21.383405Z"
    },
    "papermill": {
     "duration": 0.009435,
     "end_time": "2025-05-25T08:32:21.384896",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.375461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define model builder for Keras Tuner\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_1', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_1', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_2', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_2', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_3', 32, 128, step=32)))\n",
    "    model.add(Dropout(hp.Float('dropout_3', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    lr = hp.Float('lr', 1e-4, 1e-2, sampling='log')\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c0b94cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:21.390952Z",
     "iopub.status.busy": "2025-05-25T08:32:21.390780Z",
     "iopub.status.idle": "2025-05-25T08:32:23.868581Z",
     "shell.execute_reply": "2025-05-25T08:32:23.867796Z"
    },
    "papermill": {
     "duration": 2.482363,
     "end_time": "2025-05-25T08:32:23.869973",
     "exception": false,
     "start_time": "2025-05-25T08:32:21.387610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1748161942.554958      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1748161942.555764      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# Keras Tuner Random Search\n",
    "tuner = kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='gru_tuner_dir',\n",
    "    project_name='gru_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f36f023f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:32:23.876820Z",
     "iopub.status.busy": "2025-05-25T08:32:23.876448Z",
     "iopub.status.idle": "2025-05-25T08:33:45.705531Z",
     "shell.execute_reply": "2025-05-25T08:33:45.704805Z"
    },
    "papermill": {
     "duration": 81.833784,
     "end_time": "2025-05-25T08:33:45.706714",
     "exception": false,
     "start_time": "2025-05-25T08:32:23.872930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 10s]\n",
      "val_loss: 0.0002232600818388164\n",
      "\n",
      "Best val_loss So Far: 0.00017842826491687447\n",
      "Total elapsed time: 00h 01m 22s\n"
     ]
    }
   ],
   "source": [
    "# Tuning\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "tuner.search(X_train, y_train, validation_data=(X_test, y_test),\n",
    "             epochs=20, batch_size=32,\n",
    "             callbacks=[early_stop], verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "72a2a0d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:33:45.713799Z",
     "iopub.status.busy": "2025-05-25T08:33:45.713306Z",
     "iopub.status.idle": "2025-05-25T08:33:47.336140Z",
     "shell.execute_reply": "2025-05-25T08:33:47.335443Z"
    },
    "papermill": {
     "duration": 1.627344,
     "end_time": "2025-05-25T08:33:47.337322",
     "exception": false,
     "start_time": "2025-05-25T08:33:45.709978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 24 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n",
      "MSLE: 7.089274166686528e-05\n",
      "TUNED GRU -> RMSE: 0.013357704428678969, MAE: 0.010422239872666437, MAPE: 0.019979365892025962, R2: 0.9949266387229624\n"
     ]
    }
   ],
   "source": [
    "# Best model from tuning\n",
    "best_model = tuner.get_best_models(num_models=1)[0]\n",
    "\n",
    "# Evaluation\n",
    "preds = best_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, preds)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, preds)\n",
    "mape = mean_absolute_percentage_error(y_test, preds)\n",
    "r2 = r2_score(y_test, preds)\n",
    "\n",
    "msle = mean_squared_log_error(y_test, preds)\n",
    "print(f\"MSLE: {msle}\")\n",
    "print(f\"TUNED GRU -> RMSE: {rmse}, MAE: {mae}, MAPE: {mape}, R2: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c573a159",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-25T08:33:47.346122Z",
     "iopub.status.busy": "2025-05-25T08:33:47.345491Z",
     "iopub.status.idle": "2025-05-25T08:33:47.617276Z",
     "shell.execute_reply": "2025-05-25T08:33:47.616528Z"
    },
    "papermill": {
     "duration": 0.277316,
     "end_time": "2025-05-25T08:33:47.618588",
     "exception": false,
     "start_time": "2025-05-25T08:33:47.341272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test, label='Actual Price')\n",
    "plt.plot(preds, label='Predicted Price')\n",
    "plt.title('GRU Prediction vs Actual')\n",
    "plt.xlabel('Time Step')\n",
    "plt.ylabel('Normalized Price')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 108.242336,
   "end_time": "2025-05-25T08:33:50.607571",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-25T08:32:02.365235",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
