{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "05563e17",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:30.476200Z",
     "iopub.status.busy": "2025-05-18T11:17:30.475997Z",
     "iopub.status.idle": "2025-05-18T11:17:32.032115Z",
     "shell.execute_reply": "2025-05-18T11:17:32.031310Z"
    },
    "papermill": {
     "duration": 1.56109,
     "end_time": "2025-05-18T11:17:32.033409",
     "exception": false,
     "start_time": "2025-05-18T11:17:30.472319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasethargaemasindikatormoneter/Validation Data.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap Fix.csv\n",
      "/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b03056b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:32.040040Z",
     "iopub.status.busy": "2025-05-18T11:17:32.039377Z",
     "iopub.status.idle": "2025-05-18T11:17:46.548950Z",
     "shell.execute_reply": "2025-05-18T11:17:46.548106Z"
    },
    "papermill": {
     "duration": 14.51416,
     "end_time": "2025-05-18T11:17:46.550432",
     "exception": false,
     "start_time": "2025-05-18T11:17:32.036272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-18 11:17:33.714980: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1747567053.939224      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1747567054.005139      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "18ef017d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.557161Z",
     "iopub.status.busy": "2025-05-18T11:17:46.556681Z",
     "iopub.status.idle": "2025-05-18T11:17:46.598661Z",
     "shell.execute_reply": "2025-05-18T11:17:46.597792Z"
    },
    "papermill": {
     "duration": 0.046415,
     "end_time": "2025-05-18T11:17:46.599825",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.553410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Date               1932 non-null   object \n",
      " 1   Price              1932 non-null   int64  \n",
      " 2   Kurs               1932 non-null   int64  \n",
      " 3   Inflasi            1932 non-null   float64\n",
      " 4   IndONIA            1932 non-null   float64\n",
      " 5   Cadangan Devisa    1932 non-null   float64\n",
      " 6   Money Supply (M2)  1932 non-null   float64\n",
      " 7   Minyak             1932 non-null   float64\n",
      "dtypes: float64(5), int64(2), object(1)\n",
      "memory usage: 120.9+ KB\n"
     ]
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/datasethargaemasindikatormoneter/Data Gabungan Lengkap.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c3440ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.605762Z",
     "iopub.status.busy": "2025-05-18T11:17:46.605521Z",
     "iopub.status.idle": "2025-05-18T11:17:46.620605Z",
     "shell.execute_reply": "2025-05-18T11:17:46.620093Z"
    },
    "papermill": {
     "duration": 0.019216,
     "end_time": "2025-05-18T11:17:46.621635",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.602419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Minyak'], axis=1, inplace=True)\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "#'Inflasi', 'Kurs', 'Money Supply (M2)', 'IndONIA', 'Cadangan Devisa', "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f1d816b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.627255Z",
     "iopub.status.busy": "2025-05-18T11:17:46.627077Z",
     "iopub.status.idle": "2025-05-18T11:17:46.637051Z",
     "shell.execute_reply": "2025-05-18T11:17:46.636365Z"
    },
    "papermill": {
     "duration": 0.014,
     "end_time": "2025-05-18T11:17:46.638113",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.624113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1932 entries, 0 to 1931\n",
      "Data columns (total 7 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   Date               1932 non-null   datetime64[ns]\n",
      " 1   Price              1932 non-null   float64       \n",
      " 2   Kurs               1932 non-null   float64       \n",
      " 3   Inflasi            1932 non-null   float64       \n",
      " 4   IndONIA            1932 non-null   float64       \n",
      " 5   Cadangan Devisa    1932 non-null   float64       \n",
      " 6   Money Supply (M2)  1932 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(6)\n",
      "memory usage: 105.8 KB\n"
     ]
    }
   ],
   "source": [
    "# Preprocess numeric columns\n",
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].astype('float64')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "742f3205",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.644684Z",
     "iopub.status.busy": "2025-05-18T11:17:46.644506Z",
     "iopub.status.idle": "2025-05-18T11:17:46.650484Z",
     "shell.execute_reply": "2025-05-18T11:17:46.649804Z"
    },
    "papermill": {
     "duration": 0.009871,
     "end_time": "2025-05-18T11:17:46.651518",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.641647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values: 0\n",
      "Duplicates: 0\n"
     ]
    }
   ],
   "source": [
    "# Cek data\n",
    "print(\"Missing values:\", df.isnull().sum().sum())\n",
    "print(\"Duplicates:\", df.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d86fb3f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.657257Z",
     "iopub.status.busy": "2025-05-18T11:17:46.656894Z",
     "iopub.status.idle": "2025-05-18T11:17:46.663148Z",
     "shell.execute_reply": "2025-05-18T11:17:46.662531Z"
    },
    "papermill": {
     "duration": 0.010168,
     "end_time": "2025-05-18T11:17:46.664166",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.653998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 720\n"
     ]
    }
   ],
   "source": [
    "# Split train/test by date\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test = df[df['Date'].dt.year >= 2022]\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "03edcb83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.670161Z",
     "iopub.status.busy": "2025-05-18T11:17:46.669749Z",
     "iopub.status.idle": "2025-05-18T11:17:46.676774Z",
     "shell.execute_reply": "2025-05-18T11:17:46.676056Z"
    },
    "papermill": {
     "duration": 0.011183,
     "end_time": "2025-05-18T11:17:46.677940",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.666757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scaling\n",
    "scaler = MinMaxScaler()\n",
    "scaled_data = scaler.fit_transform(df[NumCols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d16f56d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.684145Z",
     "iopub.status.busy": "2025-05-18T11:17:46.683632Z",
     "iopub.status.idle": "2025-05-18T11:17:46.695100Z",
     "shell.execute_reply": "2025-05-18T11:17:46.694507Z"
    },
    "papermill": {
     "duration": 0.015671,
     "end_time": "2025-05-18T11:17:46.696217",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.680546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (1152, 60, 6) (1152,)\n",
      "Test shape: (720, 60, 6) (720,)\n"
     ]
    }
   ],
   "source": [
    "# Sliding window multivariate\n",
    "window_size = 60\n",
    "X, y = [], []\n",
    "\n",
    "for i in range(window_size, len(scaled_data)):\n",
    "    X.append(scaled_data[i-window_size:i])\n",
    "    y.append(scaled_data[i, 0])  # Index 0 = 'Price'\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)\n",
    "\n",
    "# Split back to train/test\n",
    "X_train, X_test = X[:-test_size], X[-test_size:]\n",
    "y_train, y_test = y[:-test_size], y[-test_size:]\n",
    "\n",
    "print(\"Train shape:\", X_train.shape, y_train.shape)\n",
    "print(\"Test shape:\", X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "98395a94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.701975Z",
     "iopub.status.busy": "2025-05-18T11:17:46.701794Z",
     "iopub.status.idle": "2025-05-18T11:17:46.707167Z",
     "shell.execute_reply": "2025-05-18T11:17:46.706513Z"
    },
    "papermill": {
     "duration": 0.009411,
     "end_time": "2025-05-18T11:17:46.708216",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.698805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define model builder for Keras Tuner\n",
    "def build_model(hp):\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_1', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_1', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_2', 32, 128, step=32), return_sequences=True))\n",
    "    model.add(Dropout(hp.Float('dropout_2', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(GRU(units=hp.Int('gru_units_3', 32, 128, step=32)))\n",
    "    model.add(Dropout(hp.Float('dropout_3', 0.1, 0.5, step=0.1)))\n",
    "\n",
    "    model.add(Dense(1))\n",
    "\n",
    "    lr = hp.Float('lr', 1e-4, 1e-2, sampling='log')\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss='mean_squared_error')\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "670476c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:46.714059Z",
     "iopub.status.busy": "2025-05-18T11:17:46.713859Z",
     "iopub.status.idle": "2025-05-18T11:17:49.533823Z",
     "shell.execute_reply": "2025-05-18T11:17:49.533285Z"
    },
    "papermill": {
     "duration": 2.824301,
     "end_time": "2025-05-18T11:17:49.535096",
     "exception": false,
     "start_time": "2025-05-18T11:17:46.710795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1747567068.115149      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1747567068.115840      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "# Keras Tuner Random Search\n",
    "tuner = kt.RandomSearch(\n",
    "    build_model,\n",
    "    objective='val_loss',\n",
    "    max_trials=10,\n",
    "    executions_per_trial=1,\n",
    "    directory='gru_tuner_dir',\n",
    "    project_name='gru_tuning'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "43c030a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:17:49.541626Z",
     "iopub.status.busy": "2025-05-18T11:17:49.541230Z",
     "iopub.status.idle": "2025-05-18T11:19:35.686590Z",
     "shell.execute_reply": "2025-05-18T11:19:35.685962Z"
    },
    "papermill": {
     "duration": 106.149754,
     "end_time": "2025-05-18T11:19:35.687733",
     "exception": false,
     "start_time": "2025-05-18T11:17:49.537979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 11s]\n",
      "val_loss: 0.0021398989483714104\n",
      "\n",
      "Best val_loss So Far: 0.00030235471785999835\n",
      "Total elapsed time: 00h 01m 46s\n"
     ]
    }
   ],
   "source": [
    "# Tuning\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "tuner.search(X_train, y_train, validation_data=(X_test, y_test),\n",
    "             epochs=20, batch_size=32,\n",
    "             callbacks=[early_stop], verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "989e9142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:19:35.694485Z",
     "iopub.status.busy": "2025-05-18T11:19:35.694099Z",
     "iopub.status.idle": "2025-05-18T11:19:37.227393Z",
     "shell.execute_reply": "2025-05-18T11:19:37.226614Z"
    },
    "papermill": {
     "duration": 1.5379,
     "end_time": "2025-05-18T11:19:37.228617",
     "exception": false,
     "start_time": "2025-05-18T11:19:35.690717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py:713: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 24 variables. \n",
      "  saveable.load_own_variables(weights_store.get(inner_path))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 16ms/step\n",
      "MSLE: 0.00011310385316687766\n",
      "TUNED GRU -> RMSE: 0.017388349880174524, MAE: 0.012990731241913318, MAPE: 0.023607194651617872, R2: 0.9914029615030522\n"
     ]
    }
   ],
   "source": [
    "# Best model from tuning\n",
    "best_model = tuner.get_best_models(num_models=1)[0]\n",
    "\n",
    "# Evaluation\n",
    "preds = best_model.predict(X_test)\n",
    "mse = mean_squared_error(y_test, preds)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, preds)\n",
    "mape = mean_absolute_percentage_error(y_test, preds)\n",
    "r2 = r2_score(y_test, preds)\n",
    "\n",
    "msle = mean_squared_log_error(y_test, preds)\n",
    "print(f\"MSLE: {msle}\")\n",
    "print(f\"TUNED GRU -> RMSE: {rmse}, MAE: {mae}, MAPE: {mape}, R2: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a2ca5e8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-18T11:19:37.236840Z",
     "iopub.status.busy": "2025-05-18T11:19:37.236562Z",
     "iopub.status.idle": "2025-05-18T11:19:37.515886Z",
     "shell.execute_reply": "2025-05-18T11:19:37.515062Z"
    },
    "papermill": {
     "duration": 0.285433,
     "end_time": "2025-05-18T11:19:37.517821",
     "exception": false,
     "start_time": "2025-05-18T11:19:37.232388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualisasi Prediksi vs Aktual\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.plot(y_test, label='Actual Price')\n",
    "plt.plot(preds, label='Predicted Price')\n",
    "plt.title('GRU Prediction vs Actual')\n",
    "plt.xlabel('Time Step')\n",
    "plt.ylabel('Normalized Price')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7000808,
     "sourceId": 11770496,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 134.390632,
   "end_time": "2025-05-18T11:19:40.556684",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-18T11:17:26.166052",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
