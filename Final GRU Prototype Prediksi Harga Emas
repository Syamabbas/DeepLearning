{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1602cb12",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-04T13:36:53.398377Z",
     "iopub.status.busy": "2025-04-04T13:36:53.397711Z",
     "iopub.status.idle": "2025-04-04T13:36:54.260216Z",
     "shell.execute_reply": "2025-04-04T13:36:54.258945Z"
    },
    "papermill": {
     "duration": 0.872535,
     "end_time": "2025-04-04T13:36:54.261993",
     "exception": false,
     "start_time": "2025-04-04T13:36:53.389458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/finaldatasethargaemas/CobaVers5 tambah minyak.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b78ef54e",
   "metadata": {
    "papermill": {
     "duration": 0.00594,
     "end_time": "2025-04-04T13:36:54.274722",
     "exception": false,
     "start_time": "2025-04-04T13:36:54.268782",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **1. Gru Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a85cd440",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:36:54.288577Z",
     "iopub.status.busy": "2025-04-04T13:36:54.288114Z",
     "iopub.status.idle": "2025-04-04T13:37:10.803582Z",
     "shell.execute_reply": "2025-04-04T13:37:10.802702Z"
    },
    "papermill": {
     "duration": 16.524438,
     "end_time": "2025-04-04T13:37:10.805456",
     "exception": false,
     "start_time": "2025-04-04T13:36:54.281018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import library untuk model GRU\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Input, GRU, Dense, Dropout\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import tensorflow as tf\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_percentage_error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from keras import Model\n",
    "from keras.layers import Input, Dense, Dropout\n",
    "from keras.layers import LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "56389645",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:10.819603Z",
     "iopub.status.busy": "2025-04-04T13:37:10.818959Z",
     "iopub.status.idle": "2025-04-04T13:37:10.864350Z",
     "shell.execute_reply": "2025-04-04T13:37:10.863335Z"
    },
    "papermill": {
     "duration": 0.054149,
     "end_time": "2025-04-04T13:37:10.866115",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.811966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Kurs</th>\n",
       "      <th>IndONIA</th>\n",
       "      <th>Inflation</th>\n",
       "      <th>Minyak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/3/2017</td>\n",
       "      <td>1,162.00</td>\n",
       "      <td>1,151.40</td>\n",
       "      <td>1,166.00</td>\n",
       "      <td>1,146.50</td>\n",
       "      <td>13485</td>\n",
       "      <td>4.12408</td>\n",
       "      <td>3.49</td>\n",
       "      <td>52,33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/4/2017</td>\n",
       "      <td>1,165.30</td>\n",
       "      <td>1,159.60</td>\n",
       "      <td>1,168.60</td>\n",
       "      <td>1,156.70</td>\n",
       "      <td>13478</td>\n",
       "      <td>4.12935</td>\n",
       "      <td>3.49</td>\n",
       "      <td>53,26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/5/2017</td>\n",
       "      <td>1,181.30</td>\n",
       "      <td>1,164.60</td>\n",
       "      <td>1,185.90</td>\n",
       "      <td>1,163.60</td>\n",
       "      <td>13370</td>\n",
       "      <td>4.12697</td>\n",
       "      <td>3.49</td>\n",
       "      <td>53,76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/6/2017</td>\n",
       "      <td>1,173.40</td>\n",
       "      <td>1,181.00</td>\n",
       "      <td>1,183.80</td>\n",
       "      <td>1,171.10</td>\n",
       "      <td>13347</td>\n",
       "      <td>4.13105</td>\n",
       "      <td>3.49</td>\n",
       "      <td>53,99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/9/2017</td>\n",
       "      <td>1,184.90</td>\n",
       "      <td>1,172.90</td>\n",
       "      <td>1,186.40</td>\n",
       "      <td>1,172.20</td>\n",
       "      <td>13385</td>\n",
       "      <td>4.14132</td>\n",
       "      <td>3.49</td>\n",
       "      <td>51,96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date     Price      Open      High       Low   Kurs  IndONIA  \\\n",
       "0  1/3/2017  1,162.00  1,151.40  1,166.00  1,146.50  13485  4.12408   \n",
       "1  1/4/2017  1,165.30  1,159.60  1,168.60  1,156.70  13478  4.12935   \n",
       "2  1/5/2017  1,181.30  1,164.60  1,185.90  1,163.60  13370  4.12697   \n",
       "3  1/6/2017  1,173.40  1,181.00  1,183.80  1,171.10  13347  4.13105   \n",
       "4  1/9/2017  1,184.90  1,172.90  1,186.40  1,172.20  13385  4.14132   \n",
       "\n",
       "   Inflation Minyak  \n",
       "0       3.49  52,33  \n",
       "1       3.49  53,26  \n",
       "2       3.49  53,76  \n",
       "3       3.49  53,99  \n",
       "4       3.49  51,96  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/finaldatasethargaemas/CobaVers5 tambah minyak.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db75a311",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:10.880286Z",
     "iopub.status.busy": "2025-04-04T13:37:10.879942Z",
     "iopub.status.idle": "2025-04-04T13:37:10.906963Z",
     "shell.execute_reply": "2025-04-04T13:37:10.905685Z"
    },
    "papermill": {
     "duration": 0.035797,
     "end_time": "2025-04-04T13:37:10.908606",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.872809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1704 entries, 0 to 1703\n",
      "Data columns (total 9 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   Date       1704 non-null   object \n",
      " 1   Price      1704 non-null   object \n",
      " 2   Open       1704 non-null   object \n",
      " 3   High       1704 non-null   object \n",
      " 4   Low        1704 non-null   object \n",
      " 5   Kurs       1704 non-null   int64  \n",
      " 6   IndONIA    1704 non-null   float64\n",
      " 7   Inflation  1704 non-null   float64\n",
      " 8   Minyak     1704 non-null   object \n",
      "dtypes: float64(2), int64(1), object(6)\n",
      "memory usage: 119.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9e4e930",
   "metadata": {
    "papermill": {
     "duration": 0.006098,
     "end_time": "2025-04-04T13:37:10.921515",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.915417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **2. Data Preparation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b5f3a787",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:10.935501Z",
     "iopub.status.busy": "2025-04-04T13:37:10.935178Z",
     "iopub.status.idle": "2025-04-04T13:37:10.941625Z",
     "shell.execute_reply": "2025-04-04T13:37:10.940707Z"
    },
    "papermill": {
     "duration": 0.015254,
     "end_time": "2025-04-04T13:37:10.943171",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.927917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(['Kurs', 'IndONIA', 'Inflation', 'Minyak'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "112681f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:10.957394Z",
     "iopub.status.busy": "2025-04-04T13:37:10.957057Z",
     "iopub.status.idle": "2025-04-04T13:37:10.971394Z",
     "shell.execute_reply": "2025-04-04T13:37:10.970449Z"
    },
    "papermill": {
     "duration": 0.023167,
     "end_time": "2025-04-04T13:37:10.972902",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.949735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.sort_values(by='Date', ascending=True, inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fe8d49b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:10.987543Z",
     "iopub.status.busy": "2025-04-04T13:37:10.987220Z",
     "iopub.status.idle": "2025-04-04T13:37:11.010101Z",
     "shell.execute_reply": "2025-04-04T13:37:11.009243Z"
    },
    "papermill": {
     "duration": 0.032158,
     "end_time": "2025-04-04T13:37:11.011833",
     "exception": false,
     "start_time": "2025-04-04T13:37:10.979675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "NumCols = df.columns.drop(['Date'])\n",
    "df[NumCols] = df[NumCols].replace({',': ''}, regex=True)\n",
    "df[NumCols] = df[NumCols].astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d2550e85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.026085Z",
     "iopub.status.busy": "2025-04-04T13:37:11.025687Z",
     "iopub.status.idle": "2025-04-04T13:37:11.037215Z",
     "shell.execute_reply": "2025-04-04T13:37:11.036299Z"
    },
    "papermill": {
     "duration": 0.020342,
     "end_time": "2025-04-04T13:37:11.038729",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.018387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-01-03</td>\n",
       "      <td>1162.0</td>\n",
       "      <td>1151.4</td>\n",
       "      <td>1166.0</td>\n",
       "      <td>1146.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-01-04</td>\n",
       "      <td>1165.3</td>\n",
       "      <td>1159.6</td>\n",
       "      <td>1168.6</td>\n",
       "      <td>1156.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-01-05</td>\n",
       "      <td>1181.3</td>\n",
       "      <td>1164.6</td>\n",
       "      <td>1185.9</td>\n",
       "      <td>1163.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>1173.4</td>\n",
       "      <td>1181.0</td>\n",
       "      <td>1183.8</td>\n",
       "      <td>1171.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>1184.9</td>\n",
       "      <td>1172.9</td>\n",
       "      <td>1186.4</td>\n",
       "      <td>1172.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date   Price    Open    High     Low\n",
       "0 2017-01-03  1162.0  1151.4  1166.0  1146.5\n",
       "1 2017-01-04  1165.3  1159.6  1168.6  1156.7\n",
       "2 2017-01-05  1181.3  1164.6  1185.9  1163.6\n",
       "3 2017-01-06  1173.4  1181.0  1183.8  1171.1\n",
       "4 2017-01-09  1184.9  1172.9  1186.4  1172.2"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "35e2fc54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.053335Z",
     "iopub.status.busy": "2025-04-04T13:37:11.052966Z",
     "iopub.status.idle": "2025-04-04T13:37:11.061487Z",
     "shell.execute_reply": "2025-04-04T13:37:11.060295Z"
    },
    "papermill": {
     "duration": 0.017662,
     "end_time": "2025-04-04T13:37:11.063179",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.045517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5be9c9f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.078273Z",
     "iopub.status.busy": "2025-04-04T13:37:11.077890Z",
     "iopub.status.idle": "2025-04-04T13:37:11.085181Z",
     "shell.execute_reply": "2025-04-04T13:37:11.084197Z"
    },
    "papermill": {
     "duration": 0.016624,
     "end_time": "2025-04-04T13:37:11.086817",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.070193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a62afc87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.102220Z",
     "iopub.status.busy": "2025-04-04T13:37:11.101770Z",
     "iopub.status.idle": "2025-04-04T13:37:11.113461Z",
     "shell.execute_reply": "2025-04-04T13:37:11.112064Z"
    },
    "papermill": {
     "duration": 0.021391,
     "end_time": "2025-04-04T13:37:11.115183",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.093792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1704 entries, 0 to 1703\n",
      "Data columns (total 5 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    1704 non-null   datetime64[ns]\n",
      " 1   Price   1704 non-null   float64       \n",
      " 2   Open    1704 non-null   float64       \n",
      " 3   High    1704 non-null   float64       \n",
      " 4   Low     1704 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(4)\n",
      "memory usage: 66.7 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adb1a239",
   "metadata": {
    "papermill": {
     "duration": 0.006912,
     "end_time": "2025-04-04T13:37:11.129496",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.122584",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **3. Splitting Data to Training & Test**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b971af5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.145299Z",
     "iopub.status.busy": "2025-04-04T13:37:11.144949Z",
     "iopub.status.idle": "2025-04-04T13:37:11.154830Z",
     "shell.execute_reply": "2025-04-04T13:37:11.153941Z"
    },
    "papermill": {
     "duration": 0.019793,
     "end_time": "2025-04-04T13:37:11.156453",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.136660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test size: 494\n"
     ]
    }
   ],
   "source": [
    "# Pisahkan data train dan test berdasarkan tahun\n",
    "df_train = df[df['Date'].dt.year < 2022]\n",
    "df_test  = df[df['Date'].dt.year >= 2022]\n",
    "\n",
    "# Hitung test_size langsung dari df_test\n",
    "test_size = df_test.shape[0]\n",
    "print(\"Test size:\", test_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0db2a060",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.171508Z",
     "iopub.status.busy": "2025-04-04T13:37:11.171164Z",
     "iopub.status.idle": "2025-04-04T13:37:11.643334Z",
     "shell.execute_reply": "2025-04-04T13:37:11.642171Z"
    },
    "papermill": {
     "duration": 0.482725,
     "end_time": "2025-04-04T13:37:11.646116",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.163391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2250x900 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot\n",
    "plt.figure(figsize=(15, 6), dpi=150)\n",
    "\n",
    "# Ubah background plot dan warna tepi sumbu\n",
    "plt.rcParams['axes.facecolor'] = 'white'      # latar belakang plot\n",
    "plt.rc('axes', edgecolor='black')            # warna tepi sumbu\n",
    "\n",
    "# Plot data training dan test\n",
    "plt.plot(df_train.Date, df_train.Price, color='black', lw=2)\n",
    "plt.plot(df_test.Date,  df_test.Price,  color='orange', lw=2)\n",
    "\n",
    "# Judul dan label\n",
    "plt.title('Gold Price Training and Test Sets', fontsize=15, color='black')\n",
    "plt.xlabel('Date', fontsize=12, color='black')\n",
    "plt.ylabel('Price', fontsize=12, color='black')\n",
    "\n",
    "# Legend\n",
    "plt.legend(['Training set', 'Test set'], loc='upper left', prop={'size': 15})\n",
    "\n",
    "# Grid berwarna abu-abu tipis agar tampak di background putih\n",
    "plt.grid(color='lightgray')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13f3bf9b",
   "metadata": {
    "papermill": {
     "duration": 0.009029,
     "end_time": "2025-04-04T13:37:11.664605",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.655576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **4. Data Scaling**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8b01dab3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.684506Z",
     "iopub.status.busy": "2025-04-04T13:37:11.684132Z",
     "iopub.status.idle": "2025-04-04T13:37:11.696209Z",
     "shell.execute_reply": "2025-04-04T13:37:11.695241Z"
    },
    "papermill": {
     "duration": 0.023832,
     "end_time": "2025-04-04T13:37:11.697708",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.673876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MinMaxScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MinMaxScaler</label><div class=\"sk-toggleable__content\"><pre>MinMaxScaler()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MinMaxScaler()"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = MinMaxScaler()\n",
    "scaler.fit(df.Price.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ad15bd",
   "metadata": {
    "papermill": {
     "duration": 0.009375,
     "end_time": "2025-04-04T13:37:11.717027",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.707652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **5. Restructure Data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f5a68849",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.737562Z",
     "iopub.status.busy": "2025-04-04T13:37:11.737213Z",
     "iopub.status.idle": "2025-04-04T13:37:11.741655Z",
     "shell.execute_reply": "2025-04-04T13:37:11.740416Z"
    },
    "papermill": {
     "duration": 0.016574,
     "end_time": "2025-04-04T13:37:11.743334",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.726760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "window_size = 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b90a961f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.763998Z",
     "iopub.status.busy": "2025-04-04T13:37:11.763606Z",
     "iopub.status.idle": "2025-04-04T13:37:11.768504Z",
     "shell.execute_reply": "2025-04-04T13:37:11.767461Z"
    },
    "papermill": {
     "duration": 0.017019,
     "end_time": "2025-04-04T13:37:11.770209",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.753190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = df.Price[:-test_size]\n",
    "train_data = scaler.transform(train_data.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a016639a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.790742Z",
     "iopub.status.busy": "2025-04-04T13:37:11.790379Z",
     "iopub.status.idle": "2025-04-04T13:37:11.795914Z",
     "shell.execute_reply": "2025-04-04T13:37:11.794992Z"
    },
    "papermill": {
     "duration": 0.017468,
     "end_time": "2025-04-04T13:37:11.797489",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.780021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = []\n",
    "y_train = []\n",
    "\n",
    "for i in range(window_size, len(train_data)):\n",
    "    X_train.append(train_data[i-60:i, 0])\n",
    "    y_train.append(train_data[i, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "96edfc62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.818041Z",
     "iopub.status.busy": "2025-04-04T13:37:11.817630Z",
     "iopub.status.idle": "2025-04-04T13:37:11.822419Z",
     "shell.execute_reply": "2025-04-04T13:37:11.821462Z"
    },
    "papermill": {
     "duration": 0.016743,
     "end_time": "2025-04-04T13:37:11.824023",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.807280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data = df.Price[-test_size-60:]\n",
    "test_data = scaler.transform(test_data.values.reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5d72d8f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.844751Z",
     "iopub.status.busy": "2025-04-04T13:37:11.844411Z",
     "iopub.status.idle": "2025-04-04T13:37:11.849965Z",
     "shell.execute_reply": "2025-04-04T13:37:11.848528Z"
    },
    "papermill": {
     "duration": 0.017833,
     "end_time": "2025-04-04T13:37:11.851621",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.833788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test = []\n",
    "y_test = []\n",
    "\n",
    "for i in range(window_size, len(test_data)):\n",
    "    X_test.append(test_data[i-60:i, 0])\n",
    "    y_test.append(test_data[i, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30345e30",
   "metadata": {
    "papermill": {
     "duration": 0.009686,
     "end_time": "2025-04-04T13:37:11.871183",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.861497",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **6. Converting Data Numpy**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f684f5d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.892357Z",
     "iopub.status.busy": "2025-04-04T13:37:11.892010Z",
     "iopub.status.idle": "2025-04-04T13:37:11.898041Z",
     "shell.execute_reply": "2025-04-04T13:37:11.897024Z"
    },
    "papermill": {
     "duration": 0.018491,
     "end_time": "2025-04-04T13:37:11.899770",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.881279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = np.array(X_train)\n",
    "X_test  = np.array(X_test)\n",
    "y_train = np.array(y_train)\n",
    "y_test  = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1ef9086d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.921085Z",
     "iopub.status.busy": "2025-04-04T13:37:11.920687Z",
     "iopub.status.idle": "2025-04-04T13:37:11.925606Z",
     "shell.execute_reply": "2025-04-04T13:37:11.924704Z"
    },
    "papermill": {
     "duration": 0.017349,
     "end_time": "2025-04-04T13:37:11.927169",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.909820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n",
    "X_test  = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n",
    "y_train = np.reshape(y_train, (-1,1))\n",
    "y_test  = np.reshape(y_test, (-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ff84e3ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.947368Z",
     "iopub.status.busy": "2025-04-04T13:37:11.947019Z",
     "iopub.status.idle": "2025-04-04T13:37:11.953490Z",
     "shell.execute_reply": "2025-04-04T13:37:11.952594Z"
    },
    "papermill": {
     "duration": 0.01833,
     "end_time": "2025-04-04T13:37:11.955002",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.936672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train Shape:  (1150, 60, 1)\n",
      "y_train Shape:  (1150, 1)\n",
      "X_test Shape:   (494, 60, 1)\n",
      "y_test Shape:   (494, 1)\n"
     ]
    }
   ],
   "source": [
    "print('X_train Shape: ', X_train.shape)\n",
    "print('y_train Shape: ', y_train.shape)\n",
    "print('X_test Shape:  ', X_test.shape)\n",
    "print('y_test Shape:  ', y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a90d8b5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:11.975793Z",
     "iopub.status.busy": "2025-04-04T13:37:11.975474Z",
     "iopub.status.idle": "2025-04-04T13:37:12.158562Z",
     "shell.execute_reply": "2025-04-04T13:37:12.157640Z"
    },
    "papermill": {
     "duration": 0.195184,
     "end_time": "2025-04-04T13:37:12.160123",
     "exception": false,
     "start_time": "2025-04-04T13:37:11.964939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ gru (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">7,950</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ gru_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)              │          <span style=\"color: #00af00; text-decoration-color: #00af00\">15,300</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ gru_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">15,300</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">51</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ gru (\u001b[38;5;33mGRU\u001b[0m)                            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m50\u001b[0m)              │           \u001b[38;5;34m7,950\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m50\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ gru_1 (\u001b[38;5;33mGRU\u001b[0m)                          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m50\u001b[0m)              │          \u001b[38;5;34m15,300\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m50\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ gru_2 (\u001b[38;5;33mGRU\u001b[0m)                          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)                  │          \u001b[38;5;34m15,300\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m51\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">38,601</span> (150.79 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m38,601\u001b[0m (150.79 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">38,601</span> (150.79 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m38,601\u001b[0m (150.79 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_gru = Sequential()\n",
    "\n",
    "# Jadikan Input(shape=...) sebagai layer pertama\n",
    "model_gru.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "\n",
    "# Tambahkan layer GRU pertama\n",
    "model_gru.add(GRU(units=50, return_sequences=True))\n",
    "model_gru.add(Dropout(0.2))\n",
    "\n",
    "# GRU kedua\n",
    "model_gru.add(GRU(units=50, return_sequences=True))\n",
    "model_gru.add(Dropout(0.2))\n",
    "\n",
    "# GRU ketiga\n",
    "model_gru.add(GRU(units=50))\n",
    "model_gru.add(Dropout(0.2))\n",
    "\n",
    "# Layer output\n",
    "model_gru.add(Dense(units=1))\n",
    "\n",
    "# Kompilasi model\n",
    "model_gru.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "model_gru.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1722de87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:12.181813Z",
     "iopub.status.busy": "2025-04-04T13:37:12.181488Z",
     "iopub.status.idle": "2025-04-04T13:37:12.189212Z",
     "shell.execute_reply": "2025-04-04T13:37:12.188345Z"
    },
    "papermill": {
     "duration": 0.020173,
     "end_time": "2025-04-04T13:37:12.190694",
     "exception": false,
     "start_time": "2025-04-04T13:37:12.170521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Kompilasi model GRU\n",
    "model_gru.compile(optimizer='adam', loss='mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4ee0a1c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:37:12.213775Z",
     "iopub.status.busy": "2025-04-04T13:37:12.213452Z",
     "iopub.status.idle": "2025-04-04T13:39:53.835920Z",
     "shell.execute_reply": "2025-04-04T13:39:53.834958Z"
    },
    "papermill": {
     "duration": 161.635643,
     "end_time": "2025-04-04T13:39:53.837731",
     "exception": false,
     "start_time": "2025-04-04T13:37:12.202088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 102ms/step - loss: 0.0622 - val_loss: 0.0045\n",
      "Epoch 2/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0050 - val_loss: 0.0018\n",
      "Epoch 3/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 91ms/step - loss: 0.0034 - val_loss: 9.9771e-04\n",
      "Epoch 4/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0036 - val_loss: 0.0010\n",
      "Epoch 5/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0034 - val_loss: 0.0010\n",
      "Epoch 6/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0029 - val_loss: 0.0018\n",
      "Epoch 7/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0028 - val_loss: 0.0024\n",
      "Epoch 8/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0030 - val_loss: 0.0011\n",
      "Epoch 9/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0025 - val_loss: 0.0012\n",
      "Epoch 10/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0023 - val_loss: 9.3923e-04\n",
      "Epoch 11/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0025 - val_loss: 0.0015\n",
      "Epoch 12/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0024 - val_loss: 0.0010\n",
      "Epoch 13/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 93ms/step - loss: 0.0027 - val_loss: 0.0012\n",
      "Epoch 14/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0024 - val_loss: 0.0010\n",
      "Epoch 15/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0021 - val_loss: 9.7550e-04\n",
      "Epoch 16/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0018 - val_loss: 0.0017\n",
      "Epoch 17/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0022 - val_loss: 0.0041\n",
      "Epoch 18/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0023 - val_loss: 0.0019\n",
      "Epoch 19/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0023 - val_loss: 0.0014\n",
      "Epoch 20/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0023 - val_loss: 0.0020\n",
      "Epoch 21/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 84ms/step - loss: 0.0022 - val_loss: 0.0010\n",
      "Epoch 22/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0019 - val_loss: 9.8189e-04\n",
      "Epoch 23/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 89ms/step - loss: 0.0019 - val_loss: 0.0014\n",
      "Epoch 24/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 88ms/step - loss: 0.0018 - val_loss: 8.1775e-04\n",
      "Epoch 25/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0018 - val_loss: 0.0023\n",
      "Epoch 26/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0018 - val_loss: 9.0604e-04\n",
      "Epoch 27/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0019 - val_loss: 7.5463e-04\n",
      "Epoch 28/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0020 - val_loss: 0.0015\n",
      "Epoch 29/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 87ms/step - loss: 0.0016 - val_loss: 0.0015\n",
      "Epoch 30/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0016 - val_loss: 0.0024\n",
      "Epoch 31/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0018 - val_loss: 0.0023\n",
      "Epoch 32/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0017 - val_loss: 0.0013\n",
      "Epoch 33/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0018 - val_loss: 0.0013\n",
      "Epoch 34/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 91ms/step - loss: 0.0017 - val_loss: 7.0894e-04\n",
      "Epoch 35/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0016 - val_loss: 6.6045e-04\n",
      "Epoch 36/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0016 - val_loss: 0.0011\n",
      "Epoch 37/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0016 - val_loss: 0.0022\n",
      "Epoch 38/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0017 - val_loss: 6.0753e-04\n",
      "Epoch 39/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0015 - val_loss: 0.0020\n",
      "Epoch 40/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0016 - val_loss: 9.1105e-04\n",
      "Epoch 41/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 84ms/step - loss: 0.0014 - val_loss: 8.7723e-04\n",
      "Epoch 42/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0015 - val_loss: 5.6589e-04\n",
      "Epoch 43/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0014 - val_loss: 6.6867e-04\n",
      "Epoch 44/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 90ms/step - loss: 0.0014 - val_loss: 6.3780e-04\n",
      "Epoch 45/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 87ms/step - loss: 0.0014 - val_loss: 8.4014e-04\n",
      "Epoch 46/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0014 - val_loss: 6.2413e-04\n",
      "Epoch 47/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 85ms/step - loss: 0.0013 - val_loss: 0.0010\n",
      "Epoch 48/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0013 - val_loss: 5.5897e-04\n",
      "Epoch 49/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 87ms/step - loss: 0.0014 - val_loss: 0.0013\n",
      "Epoch 50/50\n",
      "\u001b[1m36/36\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 86ms/step - loss: 0.0014 - val_loss: 8.2737e-04\n"
     ]
    }
   ],
   "source": [
    "# Training model GRU\n",
    "history_gru = model_gru.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7edc9e84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:39:54.123509Z",
     "iopub.status.busy": "2025-04-04T13:39:54.123146Z",
     "iopub.status.idle": "2025-04-04T13:39:55.390290Z",
     "shell.execute_reply": "2025-04-04T13:39:55.389076Z"
    },
    "papermill": {
     "duration": 1.438298,
     "end_time": "2025-04-04T13:39:55.391976",
     "exception": false,
     "start_time": "2025-04-04T13:39:53.953678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 49ms/step\n",
      "GRU - MSE: 0.0008273689815179813, RMSE: 0.02876402234594427, MAE: 0.022728007149873893, R²: 0.9411817411575317\n"
     ]
    }
   ],
   "source": [
    "# Evaluasi model GRU\n",
    "gru_predictions = model_gru.predict(X_test)\n",
    "gru_mse = mean_squared_error(y_test, gru_predictions)\n",
    "gru_rmse = np.sqrt(gru_mse)\n",
    "gru_mae = mean_absolute_error(y_test, gru_predictions)\n",
    "gru_r2 = r2_score(y_test, gru_predictions)  # Hitung R²\n",
    "\n",
    "print(f\"GRU - MSE: {gru_mse}, RMSE: {gru_rmse}, MAE: {gru_mae}, R²: {gru_r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b23cf483",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-04T13:39:55.619987Z",
     "iopub.status.busy": "2025-04-04T13:39:55.619558Z",
     "iopub.status.idle": "2025-04-04T14:33:05.400194Z",
     "shell.execute_reply": "2025-04-04T14:33:05.398971Z"
    },
    "papermill": {
     "duration": 3189.896217,
     "end_time": "2025-04-04T14:33:05.402287",
     "exception": false,
     "start_time": "2025-04-04T13:39:55.506070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training with units=50, dropout=0.2, batch_size=16, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 48ms/step\n",
      "Training with units=50, dropout=0.2, batch_size=16, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 50ms/step\n",
      "Training with units=50, dropout=0.2, batch_size=32, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 49ms/step\n",
      "Training with units=50, dropout=0.2, batch_size=32, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 48ms/step\n",
      "Training with units=50, dropout=0.3, batch_size=16, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 48ms/step\n",
      "Training with units=50, dropout=0.3, batch_size=16, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 50ms/step\n",
      "Training with units=50, dropout=0.3, batch_size=32, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 49ms/step\n",
      "Training with units=50, dropout=0.3, batch_size=32, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 50ms/step\n",
      "Training with units=100, dropout=0.2, batch_size=16, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 62ms/step\n",
      "Training with units=100, dropout=0.2, batch_size=16, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step\n",
      "Training with units=100, dropout=0.2, batch_size=32, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 64ms/step\n",
      "Training with units=100, dropout=0.2, batch_size=32, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 61ms/step\n",
      "Training with units=100, dropout=0.3, batch_size=16, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 59ms/step\n",
      "Training with units=100, dropout=0.3, batch_size=16, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step\n",
      "Training with units=100, dropout=0.3, batch_size=32, epochs=30\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step\n",
      "Training with units=100, dropout=0.3, batch_size=32, epochs=50\n",
      "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 60ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>units</th>\n",
       "      <th>dropout</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>epochs</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>MAE</th>\n",
       "      <th>R2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>100</td>\n",
       "      <td>0.2</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>0.020895</td>\n",
       "      <td>0.016062</td>\n",
       "      <td>0.968960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>100</td>\n",
       "      <td>0.2</td>\n",
       "      <td>16</td>\n",
       "      <td>30</td>\n",
       "      <td>0.000464</td>\n",
       "      <td>0.021546</td>\n",
       "      <td>0.017007</td>\n",
       "      <td>0.966997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50</td>\n",
       "      <td>0.2</td>\n",
       "      <td>32</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>0.023096</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.962079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>100</td>\n",
       "      <td>0.2</td>\n",
       "      <td>32</td>\n",
       "      <td>30</td>\n",
       "      <td>0.000553</td>\n",
       "      <td>0.023511</td>\n",
       "      <td>0.018222</td>\n",
       "      <td>0.960704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>0.2</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000575</td>\n",
       "      <td>0.023971</td>\n",
       "      <td>0.019258</td>\n",
       "      <td>0.959150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>100</td>\n",
       "      <td>0.2</td>\n",
       "      <td>32</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000604</td>\n",
       "      <td>0.024582</td>\n",
       "      <td>0.019409</td>\n",
       "      <td>0.957042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>50</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000651</td>\n",
       "      <td>0.025519</td>\n",
       "      <td>0.020540</td>\n",
       "      <td>0.953705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>50</td>\n",
       "      <td>0.3</td>\n",
       "      <td>32</td>\n",
       "      <td>50</td>\n",
       "      <td>0.000846</td>\n",
       "      <td>0.029082</td>\n",
       "      <td>0.022867</td>\n",
       "      <td>0.939874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>50</td>\n",
       "      <td>0.2</td>\n",
       "      <td>32</td>\n",
       "      <td>30</td>\n",
       "      <td>0.000895</td>\n",
       "      <td>0.029910</td>\n",
       "      <td>0.024212</td>\n",
       "      <td>0.936400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>100</td>\n",
       "      <td>0.3</td>\n",
       "      <td>32</td>\n",
       "      <td>30</td>\n",
       "      <td>0.000972</td>\n",
       "      <td>0.031170</td>\n",
       "      <td>0.024911</td>\n",
       "      <td>0.930928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>0.2</td>\n",
       "      <td>16</td>\n",
       "      <td>30</td>\n",
       "      <td>0.000998</td>\n",
       "      <td>0.031593</td>\n",
       "      <td>0.025435</td>\n",
       "      <td>0.929042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>50</td>\n",
       "      <td>0.3</td>\n",
       "      <td>32</td>\n",
       "      <td>30</td>\n",
       "      <td>0.001026</td>\n",
       "      <td>0.032031</td>\n",
       "      <td>0.025779</td>\n",
       "      <td>0.927061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>100</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16</td>\n",
       "      <td>30</td>\n",
       "      <td>0.001077</td>\n",
       "      <td>0.032814</td>\n",
       "      <td>0.027191</td>\n",
       "      <td>0.923454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>100</td>\n",
       "      <td>0.3</td>\n",
       "      <td>32</td>\n",
       "      <td>50</td>\n",
       "      <td>0.001191</td>\n",
       "      <td>0.034508</td>\n",
       "      <td>0.028695</td>\n",
       "      <td>0.915343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>100</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>0.001285</td>\n",
       "      <td>0.035853</td>\n",
       "      <td>0.029825</td>\n",
       "      <td>0.908619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16</td>\n",
       "      <td>30</td>\n",
       "      <td>0.001339</td>\n",
       "      <td>0.036589</td>\n",
       "      <td>0.029879</td>\n",
       "      <td>0.904825</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    units  dropout  batch_size  epochs       MSE      RMSE       MAE        R2\n",
       "9     100      0.2          16      50  0.000437  0.020895  0.016062  0.968960\n",
       "8     100      0.2          16      30  0.000464  0.021546  0.017007  0.966997\n",
       "3      50      0.2          32      50  0.000533  0.023096  0.018333  0.962079\n",
       "10    100      0.2          32      30  0.000553  0.023511  0.018222  0.960704\n",
       "1      50      0.2          16      50  0.000575  0.023971  0.019258  0.959150\n",
       "11    100      0.2          32      50  0.000604  0.024582  0.019409  0.957042\n",
       "5      50      0.3          16      50  0.000651  0.025519  0.020540  0.953705\n",
       "7      50      0.3          32      50  0.000846  0.029082  0.022867  0.939874\n",
       "2      50      0.2          32      30  0.000895  0.029910  0.024212  0.936400\n",
       "14    100      0.3          32      30  0.000972  0.031170  0.024911  0.930928\n",
       "0      50      0.2          16      30  0.000998  0.031593  0.025435  0.929042\n",
       "6      50      0.3          32      30  0.001026  0.032031  0.025779  0.927061\n",
       "12    100      0.3          16      30  0.001077  0.032814  0.027191  0.923454\n",
       "15    100      0.3          32      50  0.001191  0.034508  0.028695  0.915343\n",
       "13    100      0.3          16      50  0.001285  0.035853  0.029825  0.908619\n",
       "4      50      0.3          16      30  0.001339  0.036589  0.029879  0.904825"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import GRU, Dense, Dropout, Input\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import itertools\n",
    "\n",
    "# Daftar kombinasi hyperparameter\n",
    "param_grid = {\n",
    "    'units': [50, 100],\n",
    "    'dropout': [0.2, 0.3],\n",
    "    'batch_size': [16, 32],\n",
    "    'epochs': [30, 50]\n",
    "}\n",
    "\n",
    "# Kombinasi semua parameter\n",
    "param_combinations = list(itertools.product(\n",
    "    param_grid['units'],\n",
    "    param_grid['dropout'],\n",
    "    param_grid['batch_size'],\n",
    "    param_grid['epochs']\n",
    "))\n",
    "\n",
    "results = []\n",
    "\n",
    "for units, dropout, batch_size, epochs in param_combinations:\n",
    "    print(f\"Training with units={units}, dropout={dropout}, batch_size={batch_size}, epochs={epochs}\")\n",
    "\n",
    "    # Build model\n",
    "    model = Sequential()\n",
    "    model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))\n",
    "    model.add(GRU(units=units, return_sequences=True))\n",
    "    model.add(Dropout(dropout))\n",
    "    model.add(GRU(units=units, return_sequences=True))\n",
    "    model.add(Dropout(dropout))\n",
    "    model.add(GRU(units=units))\n",
    "    model.add(Dropout(dropout))\n",
    "    model.add(Dense(units=1))\n",
    "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "    # Train model\n",
    "    history = model.fit(X_train, y_train,\n",
    "                        epochs=epochs,\n",
    "                        batch_size=batch_size,\n",
    "                        verbose=0,\n",
    "                        validation_data=(X_test, y_test))\n",
    "\n",
    "    # Evaluate\n",
    "    predictions = model.predict(X_test)\n",
    "    mse = mean_squared_error(y_test, predictions)\n",
    "    rmse = np.sqrt(mse)\n",
    "    mae = mean_absolute_error(y_test, predictions)\n",
    "    r2 = r2_score(y_test, predictions)\n",
    "\n",
    "    results.append({\n",
    "        'units': units,\n",
    "        'dropout': dropout,\n",
    "        'batch_size': batch_size,\n",
    "        'epochs': epochs,\n",
    "        'MSE': mse,\n",
    "        'RMSE': rmse,\n",
    "        'MAE': mae,\n",
    "        'R2': r2\n",
    "    })\n",
    "\n",
    "# Tampilkan hasil tuning\n",
    "results_df = pd.DataFrame(results)\n",
    "display(results_df.sort_values(by='RMSE'))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6775894,
     "sourceId": 11271945,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3378.52593,
   "end_time": "2025-04-04T14:33:09.124646",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-04T13:36:50.598716",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
