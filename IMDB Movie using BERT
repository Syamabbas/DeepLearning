{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":849658,"sourceType":"datasetVersion","datasetId":447516}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/syamabbas/imdb-movie-using-bert?scriptVersionId=207100882\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:39.515103Z","iopub.execute_input":"2024-11-13T15:20:39.515475Z","iopub.status.idle":"2024-11-13T15:20:39.534404Z","shell.execute_reply.started":"2024-11-13T15:20:39.515441Z","shell.execute_reply":"2024-11-13T15:20:39.533511Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/imdb-50k-movie-reviews-test-your-bert/train.csv\n/kaggle/input/imdb-50k-movie-reviews-test-your-bert/test.csv\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# !pip install pytorch-nlp","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:39.53573Z","iopub.execute_input":"2024-11-13T15:20:39.53605Z","iopub.status.idle":"2024-11-13T15:20:39.539771Z","shell.execute_reply.started":"2024-11-13T15:20:39.536017Z","shell.execute_reply":"2024-11-13T15:20:39.538876Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"import sys\nimport numpy as np\nimport random as rn\nimport pandas as pd\nimport torch\nfrom transformers import BertModel, BertTokenizer\nfrom torch import nn\nfrom keras.preprocessing.sequence import pad_sequences\nfrom torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\nfrom torch.optim import Adam\nfrom torch.nn.utils import clip_grad_norm_\nfrom IPython.display import clear_output\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:39.542394Z","iopub.execute_input":"2024-11-13T15:20:39.542703Z","iopub.status.idle":"2024-11-13T15:20:39.550948Z","shell.execute_reply.started":"2024-11-13T15:20:39.542671Z","shell.execute_reply":"2024-11-13T15:20:39.550126Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"rn.seed(321)\nnp.random.seed(321)\ntorch.manual_seed(321)\ntorch.cuda.manual_seed(321)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:39.552778Z","iopub.execute_input":"2024-11-13T15:20:39.553167Z","iopub.status.idle":"2024-11-13T15:20:39.560073Z","shell.execute_reply.started":"2024-11-13T15:20:39.553125Z","shell.execute_reply":"2024-11-13T15:20:39.559287Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"path = '/kaggle/input/imdb-50k-movie-reviews-test-your-bert/'\n\ntrain_data = pd.read_csv(path + 'train.csv')\ntest_data = pd.read_csv(path + 'test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:39.561184Z","iopub.execute_input":"2024-11-13T15:20:39.561457Z","iopub.status.idle":"2024-11-13T15:20:40.165991Z","shell.execute_reply.started":"2024-11-13T15:20:39.561427Z","shell.execute_reply":"2024-11-13T15:20:40.164948Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# experimenting here with a sample of dataset, to avoid memory overflow.\ntrain_data = train_data[:2000]\ntest_data = test_data[:500]\n\ntrain_data = train_data.to_dict(orient='records')\ntest_data = test_data.to_dict(orient='records')\ntype(train_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:40.167332Z","iopub.execute_input":"2024-11-13T15:20:40.167729Z","iopub.status.idle":"2024-11-13T15:20:40.192846Z","shell.execute_reply.started":"2024-11-13T15:20:40.167683Z","shell.execute_reply":"2024-11-13T15:20:40.191973Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"list"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"train_texts, train_labels = list(zip(*map(lambda d: (d['text'], d['sentiment']), train_data)))\ntest_texts, test_labels = list(zip(*map(lambda d: (d['text'], d['sentiment']), test_data)))\n\nlen(train_texts), len(train_labels), len(test_texts), len(test_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:40.195311Z","iopub.execute_input":"2024-11-13T15:20:40.195645Z","iopub.status.idle":"2024-11-13T15:20:40.207247Z","shell.execute_reply.started":"2024-11-13T15:20:40.195598Z","shell.execute_reply":"2024-11-13T15:20:40.206355Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"(2000, 2000, 500, 500)"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"# visualizing one of the sentences from train setÂ¶\ntrain_texts[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:40.20841Z","iopub.execute_input":"2024-11-13T15:20:40.20877Z","iopub.status.idle":"2024-11-13T15:20:40.221126Z","shell.execute_reply.started":"2024-11-13T15:20:40.208729Z","shell.execute_reply":"2024-11-13T15:20:40.220263Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"'The saddest thing about this \"tribute\" is that almost all the singers (including the otherwise incredibly talented Nick Cave) seem to have missed the whole point where Cohen\\'s intensity lies: by delivering his lines in an almost tuneless poise, Cohen transmits the full extent of his poetry, his irony, his all-round humanity, laughter and tears in one.<br /><br />To see some of these singer upstarts make convoluted suffering faces, launch their pathetic squeals in the patent effort to scream \"I\\'m a singer!,\" is a true pain. It\\'s the same feeling many of you probably had listening in to some horrendous operatic versions of simple songs such as Lennon\\'s \"Imagine.\" Nothing, simply nothing gets close to the simplicity and directness of the original. If there is a form of art that doesn\\'t need embellishments, it\\'s Cohen\\'s art. Embellishments cast it in the street looking like the tasteless make-up of sex for sale.<br /><br />In this Cohen\\'s tribute I found myself suffering and suffering through pitiful tributes and awful reinterpretations, all of them entirely lacking the original irony of the master and, if truth be told, several of these singers sounded as if they had been recruited at some asylum talent show. It\\'s Cohen doing a tribute to them by letting them sing his material, really, not the other way around: they may have been friends, or his daughter\\'s, he could have become very tender-hearted and in the mood for a gift. Too bad it didn\\'t stay in the family.<br /><br />Fortunately, but only at the very end, Cohen himself performed his majestic \"Tower of Song,\" but even that flower was spoiled by the totally incongruous background of the U2, all of them carrying the expression that bored kids have when they visit their poor grandpa at the nursing home.<br /><br />A sad show, really, and sadder if you truly love Cohen as I do.'"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"sentences = [len(sent) for sent in train_texts]\n\nplt.rcParams.update({'figure.figsize':(7,5), 'figure.dpi':100})\nplt.bar(range(1,2001), sentences, color = ['red'])\nplt.gca().set(title='No. of characters in each sentence', xlabel='Number of sentence', ylabel='Number of Characters in each sentence');","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:40.222226Z","iopub.execute_input":"2024-11-13T15:20:40.22258Z","iopub.status.idle":"2024-11-13T15:20:43.767713Z","shell.execute_reply.started":"2024-11-13T15:20:40.222538Z","shell.execute_reply":"2024-11-13T15:20:43.766766Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 700x500 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:43.768938Z","iopub.execute_input":"2024-11-13T15:20:43.76927Z","iopub.status.idle":"2024-11-13T15:20:44.060778Z","shell.execute_reply.started":"2024-11-13T15:20:43.76923Z","shell.execute_reply":"2024-11-13T15:20:44.059919Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"tokenizer.tokenize('Hello World I am Fine')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:44.062031Z","iopub.execute_input":"2024-11-13T15:20:44.06233Z","iopub.status.idle":"2024-11-13T15:20:44.068554Z","shell.execute_reply.started":"2024-11-13T15:20:44.062298Z","shell.execute_reply":"2024-11-13T15:20:44.067665Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"['hello', 'world', 'i', 'am', 'fine']"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"train_tokens = list(map(lambda t: ['[CLS]'] + tokenizer.tokenize(t)[:510] + ['[SEP]'], train_texts))\ntest_tokens = list(map(lambda t: ['[CLS]'] + tokenizer.tokenize(t)[:510] + ['[SEP]'], test_texts))\n\nlen(train_tokens), len(test_tokens)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:20:44.069721Z","iopub.execute_input":"2024-11-13T15:20:44.070106Z","iopub.status.idle":"2024-11-13T15:21:04.379662Z","shell.execute_reply.started":"2024-11-13T15:20:44.070063Z","shell.execute_reply":"2024-11-13T15:21:04.378716Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"(2000, 500)"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"train_tokens_ids = pad_sequences(list(map(tokenizer.convert_tokens_to_ids, train_tokens)), maxlen=512, truncating=\"post\", padding=\"post\", dtype=\"int\")\ntest_tokens_ids = pad_sequences(list(map(tokenizer.convert_tokens_to_ids, test_tokens)), maxlen=512, truncating=\"post\", padding=\"post\", dtype=\"int\")\n\ntrain_tokens_ids.shape, test_tokens_ids.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:04.380989Z","iopub.execute_input":"2024-11-13T15:21:04.381733Z","iopub.status.idle":"2024-11-13T15:21:05.172494Z","shell.execute_reply.started":"2024-11-13T15:21:04.381688Z","shell.execute_reply":"2024-11-13T15:21:05.1716Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"((2000, 512), (500, 512))"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"train_y = np.array(train_labels) == 'pos'\ntest_y = np.array(test_labels) == 'pos'\ntrain_y.shape, test_y.shape, np.mean(train_y), np.mean(test_y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:05.173605Z","iopub.execute_input":"2024-11-13T15:21:05.173965Z","iopub.status.idle":"2024-11-13T15:21:05.181599Z","shell.execute_reply.started":"2024-11-13T15:21:05.173906Z","shell.execute_reply":"2024-11-13T15:21:05.18066Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"((2000,), (500,), 0.4855, 0.508)"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"train_masks = [[float(i > 0) for i in ii] for ii in train_tokens_ids]\ntest_masks = [[float(i > 0) for i in ii] for ii in test_tokens_ids]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:05.183057Z","iopub.execute_input":"2024-11-13T15:21:05.183342Z","iopub.status.idle":"2024-11-13T15:21:05.996959Z","shell.execute_reply.started":"2024-11-13T15:21:05.183311Z","shell.execute_reply":"2024-11-13T15:21:05.995963Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:06.000428Z","iopub.execute_input":"2024-11-13T15:21:06.000816Z","iopub.status.idle":"2024-11-13T15:21:06.005563Z","shell.execute_reply.started":"2024-11-13T15:21:06.000783Z","shell.execute_reply":"2024-11-13T15:21:06.004673Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"baseline_model = make_pipeline(CountVectorizer(ngram_range=(1,3)), LogisticRegression()).fit(train_texts, train_labels)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:06.006801Z","iopub.execute_input":"2024-11-13T15:21:06.007162Z","iopub.status.idle":"2024-11-13T15:21:29.381172Z","shell.execute_reply.started":"2024-11-13T15:21:06.007105Z","shell.execute_reply":"2024-11-13T15:21:29.380201Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"baseline_predicted = baseline_model.predict(test_texts)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.382767Z","iopub.execute_input":"2024-11-13T15:21:29.383202Z","iopub.status.idle":"2024-11-13T15:21:29.713727Z","shell.execute_reply.started":"2024-11-13T15:21:29.383156Z","shell.execute_reply":"2024-11-13T15:21:29.71296Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"print(classification_report(test_labels, baseline_predicted))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.714895Z","iopub.execute_input":"2024-11-13T15:21:29.715312Z","iopub.status.idle":"2024-11-13T15:21:29.732544Z","shell.execute_reply.started":"2024-11-13T15:21:29.715266Z","shell.execute_reply":"2024-11-13T15:21:29.731693Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n         neg       0.82      0.84      0.83       246\n         pos       0.84      0.83      0.83       254\n\n    accuracy                           0.83       500\n   macro avg       0.83      0.83      0.83       500\nweighted avg       0.83      0.83      0.83       500\n\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"class BertBinaryClassifier(nn.Module):\n    def __init__(self, dropout=0.1):\n        super(BertBinaryClassifier, self).__init__()\n\n        self.bert = BertModel.from_pretrained('bert-base-uncased')\n\n        self.dropout = nn.Dropout(dropout)\n        self.linear = nn.Linear(768, 1)\n        self.sigmoid = nn.Sigmoid()\n    \n    def forward(self, tokens, masks=None):\n        _, pooled_output = self.bert(tokens, attention_mask=masks, output_all_encoded_layers=False)\n        dropout_output = self.dropout(pooled_output)\n        linear_output = self.linear(dropout_output)\n        proba = self.sigmoid(linear_output)\n        return proba","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.733524Z","iopub.execute_input":"2024-11-13T15:21:29.733785Z","iopub.status.idle":"2024-11-13T15:21:29.740535Z","shell.execute_reply.started":"2024-11-13T15:21:29.733757Z","shell.execute_reply":"2024-11-13T15:21:29.739611Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"# ensuring that the model runs on GPU, not on CPU\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ndevice","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.741673Z","iopub.execute_input":"2024-11-13T15:21:29.742142Z","iopub.status.idle":"2024-11-13T15:21:29.750978Z","shell.execute_reply.started":"2024-11-13T15:21:29.7421Z","shell.execute_reply":"2024-11-13T15:21:29.75007Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"device(type='cuda')"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"str(torch.cuda.memory_allocated(device)/1000000 ) + 'M'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.752113Z","iopub.execute_input":"2024-11-13T15:21:29.75252Z","iopub.status.idle":"2024-11-13T15:21:29.76061Z","shell.execute_reply.started":"2024-11-13T15:21:29.752466Z","shell.execute_reply":"2024-11-13T15:21:29.759658Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"'439.085568M'"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"bert_clf = BertBinaryClassifier()\nbert_clf = bert_clf.cuda()     # running BERT on CUDA_GPU","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:29.762988Z","iopub.execute_input":"2024-11-13T15:21:29.763313Z","iopub.status.idle":"2024-11-13T15:21:30.950281Z","shell.execute_reply.started":"2024-11-13T15:21:29.763282Z","shell.execute_reply":"2024-11-13T15:21:30.949306Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"str(torch.cuda.memory_allocated(device)/1000000 ) + 'M'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:21:30.951349Z","iopub.execute_input":"2024-11-13T15:21:30.951652Z","iopub.status.idle":"2024-11-13T15:21:30.958204Z","shell.execute_reply.started":"2024-11-13T15:21:30.95162Z","shell.execute_reply":"2024-11-13T15:21:30.957237Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"'878.155264M'"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"x = torch.tensor(train_tokens_ids[:3]).to(device)\ny, pooled = bert_clf.bert(x, output_hidden_states=False, return_dict=False)\nx.shape, y.shape, pooled.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:24:39.781157Z","iopub.execute_input":"2024-11-13T15:24:39.78187Z","iopub.status.idle":"2024-11-13T15:24:40.547715Z","shell.execute_reply.started":"2024-11-13T15:24:39.781828Z","shell.execute_reply":"2024-11-13T15:24:40.54678Z"}},"outputs":[{"name":"stderr","text":"We strongly recommend passing in an `attention_mask` since your input_ids may be padded. See https://huggingface.co/docs/transformers/troubleshooting#incorrect-output-when-padding-tokens-arent-masked.\n","output_type":"stream"},{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"(torch.Size([3, 512]), torch.Size([3, 512, 768]), torch.Size([3, 768]))"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"# Cross- checking CUDA GPU Memory to ensure GPU memory is not overflowing.\nstr(torch.cuda.memory_allocated(device)/1000000 ) + 'M'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:26:30.989201Z","iopub.execute_input":"2024-11-13T15:26:30.990115Z","iopub.status.idle":"2024-11-13T15:26:30.99647Z","shell.execute_reply.started":"2024-11-13T15:26:30.990072Z","shell.execute_reply":"2024-11-13T15:26:30.995494Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"'1803.30752M'"},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"y, x, pooled = None, None, None\ntorch.cuda.empty_cache()     # Clearing Cache space for fresh Model run\nstr(torch.cuda.memory_allocated(device)/1000000 ) + 'M'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:26:40.234371Z","iopub.execute_input":"2024-11-13T15:26:40.234754Z","iopub.status.idle":"2024-11-13T15:26:40.28361Z","shell.execute_reply.started":"2024-11-13T15:26:40.234717Z","shell.execute_reply":"2024-11-13T15:26:40.282791Z"}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"'886.69952M'"},"metadata":{}}],"execution_count":57},{"cell_type":"code","source":"# Setting hyper-parameters\n\nBATCH_SIZE = 4\nEPOCHS = 10","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:27:29.024988Z","iopub.execute_input":"2024-11-13T15:27:29.02539Z","iopub.status.idle":"2024-11-13T15:27:29.029954Z","shell.execute_reply.started":"2024-11-13T15:27:29.025352Z","shell.execute_reply":"2024-11-13T15:27:29.028961Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"train_tokens_tensor = torch.tensor(train_tokens_ids)\ntrain_y_tensor = torch.tensor(train_y.reshape(-1, 1)).float()\n\ntest_tokens_tensor = torch.tensor(test_tokens_ids)\ntest_y_tensor = torch.tensor(test_y.reshape(-1, 1)).float()\n\ntrain_masks_tensor = torch.tensor(train_masks)\ntest_masks_tensor = torch.tensor(test_masks)\n\nstr(torch.cuda.memory_allocated(device)/1000000 ) + 'M'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:27:53.828976Z","iopub.execute_input":"2024-11-13T15:27:53.829852Z","iopub.status.idle":"2024-11-13T15:27:54.207967Z","shell.execute_reply.started":"2024-11-13T15:27:53.829806Z","shell.execute_reply":"2024-11-13T15:27:54.207229Z"}},"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"'886.69952M'"},"metadata":{}}],"execution_count":63},{"cell_type":"code","source":"train_dataset = TensorDataset(train_tokens_tensor, train_masks_tensor, train_y_tensor)\ntrain_sampler = RandomSampler(train_dataset)\ntrain_dataloader = DataLoader(train_dataset, sampler=train_sampler, batch_size=BATCH_SIZE)\n\ntest_dataset = TensorDataset(test_tokens_tensor, test_masks_tensor, test_y_tensor)\ntest_sampler = SequentialSampler(test_dataset)\ntest_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=BATCH_SIZE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:28:04.603008Z","iopub.execute_input":"2024-11-13T15:28:04.6034Z","iopub.status.idle":"2024-11-13T15:28:04.60931Z","shell.execute_reply.started":"2024-11-13T15:28:04.603365Z","shell.execute_reply":"2024-11-13T15:28:04.608364Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"param_optimizer = list(bert_clf.sigmoid.named_parameters()) \noptimizer_grouped_parameters = [{\"params\": [p for n, p in param_optimizer]}]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:28:18.023307Z","iopub.execute_input":"2024-11-13T15:28:18.024157Z","iopub.status.idle":"2024-11-13T15:28:18.028554Z","shell.execute_reply.started":"2024-11-13T15:28:18.024115Z","shell.execute_reply":"2024-11-13T15:28:18.027564Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"optimizer = Adam(bert_clf.parameters(), lr=3e-6)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:28:27.567471Z","iopub.execute_input":"2024-11-13T15:28:27.568304Z","iopub.status.idle":"2024-11-13T15:28:28.234489Z","shell.execute_reply.started":"2024-11-13T15:28:27.568264Z","shell.execute_reply":"2024-11-13T15:28:28.233733Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"torch.cuda.empty_cache()   # Clearing Cache space for a fresh Model run","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:28:45.170202Z","iopub.execute_input":"2024-11-13T15:28:45.171087Z","iopub.status.idle":"2024-11-13T15:28:45.175071Z","shell.execute_reply.started":"2024-11-13T15:28:45.171045Z","shell.execute_reply":"2024-11-13T15:28:45.174148Z"}},"outputs":[],"execution_count":69},{"cell_type":"code","source":"class BertBinaryClassifier(nn.Module):\n    def __init__(self, bert):\n        super(BertBinaryClassifier, self).__init__()\n        self.bert = bert\n        self.dropout = nn.Dropout(0.3)\n        self.linear = nn.Linear(self.bert.config.hidden_size, 1)\n        self.sigmoid = nn.Sigmoid()\n\n    def forward(self, tokens, masks=None):\n        _, pooled_output = self.bert(tokens, attention_mask=masks, output_hidden_states=False, return_dict=False)\n        dropout_output = self.dropout(pooled_output)\n        linear_output = self.linear(dropout_output)\n        return self.sigmoid(linear_output)\n\n# Initialize BERT model and classifier\nbert_model = BertModel.from_pretrained('bert-base-uncased')\nbert_clf = BertBinaryClassifier(bert_model).to(device)\n\n# Loss function and optimizer\nloss_func = nn.BCELoss()\noptimizer = Adam(bert_clf.parameters(), lr=1e-5)\n\n# Training loop\nfor epoch_num in range(EPOCHS):\n    bert_clf.train()\n    train_loss = 0\n    for step_num, batch_data in enumerate(train_dataloader):\n        token_ids, masks, labels = tuple(t.to(device) for t in batch_data)\n        print(str(torch.cuda.memory_allocated(device) / 1000000) + 'M')\n\n        # Forward pass\n        logits = bert_clf(token_ids, masks)\n        \n        # Compute loss\n        batch_loss = loss_func(logits, labels)\n        train_loss += batch_loss.item()\n        \n        # Backward pass\n        bert_clf.zero_grad()\n        batch_loss.backward()\n        \n        # Gradient clipping\n        clip_grad_norm_(parameters=bert_clf.parameters(), max_norm=1.0)\n        \n        # Optimizer step\n        optimizer.step()\n        \n        # Display training progress\n        clear_output(wait=True)\n        print('Epoch: ', epoch_num + 1)\n        print(\"\\r{}/{} loss: {:.4f}\".format(step_num, len(train_data) / BATCH_SIZE, train_loss / (step_num + 1)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:32:06.250053Z","iopub.execute_input":"2024-11-13T15:32:06.250737Z","iopub.status.idle":"2024-11-13T15:35:25.763536Z","shell.execute_reply.started":"2024-11-13T15:32:06.250698Z","shell.execute_reply":"2024-11-13T15:35:25.762318Z"}},"outputs":[{"name":"stdout","text":"Epoch:  2\n337/500.0 loss: 0.2614\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[71], line 28\u001b[0m\n\u001b[1;32m     26\u001b[0m train_loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m step_num, batch_data \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(train_dataloader):\n\u001b[0;32m---> 28\u001b[0m     token_ids, masks, labels \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mt\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mbatch_data\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     29\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mmemory_allocated(device) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m1000000\u001b[39m) \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     31\u001b[0m     \u001b[38;5;66;03m# Forward pass\u001b[39;00m\n","Cell \u001b[0;32mIn[71], line 28\u001b[0m, in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     26\u001b[0m train_loss \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m step_num, batch_data \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(train_dataloader):\n\u001b[0;32m---> 28\u001b[0m     token_ids, masks, labels \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtuple\u001b[39m(\u001b[43mt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m t \u001b[38;5;129;01min\u001b[39;00m batch_data)\n\u001b[1;32m     29\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mmemory_allocated(device) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m1000000\u001b[39m) \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mM\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     31\u001b[0m     \u001b[38;5;66;03m# Forward pass\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":71},{"cell_type":"code","source":"bert_clf.eval()\nbert_predicted = []\nall_logits = []\nwith torch.no_grad():\n    for step_num, batch_data in enumerate(test_dataloader):\n\n        token_ids, masks, labels = tuple(t.to(device) for t in batch_data)\n\n        logits = bert_clf(token_ids, masks)\n        loss_func = nn.BCELoss()\n        loss = loss_func(logits, labels)\n        numpy_logits = logits.cpu().detach().numpy()\n        \n        bert_predicted += list(numpy_logits[:, 0] > 0.5)\n        all_logits += list(numpy_logits[:, 0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-13T15:35:25.76425Z","iopub.status.idle":"2024-11-13T15:35:25.764613Z","shell.execute_reply.started":"2024-11-13T15:35:25.764435Z","shell.execute_reply":"2024-11-13T15:35:25.764453Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"np.mean(bert_predicted)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(classification_report(test_y, bert_predicted))","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}